{"ast":null,"code":"import { COLOR, FILL, FILLOPACITY, OPACITY, SHAPE, SIZE, STROKE, STROKEOPACITY, STROKEWIDTH } from '../../channel';\nimport { getTypedFieldDef, isFieldDef, isTimeFormatFieldDef, title as fieldDefTitle } from '../../channeldef';\nimport { GEOJSON } from '../../type';\nimport { deleteNestedProperty, getFirstDefined, keys } from '../../util';\nimport { mergeTitleComponent, numberFormat } from '../common';\nimport { guideEncodeEntry } from '../guide';\nimport { isUnitModel } from '../model';\nimport { parseGuideResolve } from '../resolve';\nimport { defaultTieBreaker, makeImplicit, mergeValuesWithExplicit } from '../split';\nimport { LegendComponent, LEGEND_COMPONENT_PROPERTIES } from './component';\nimport * as encode from './encode';\nimport * as properties from './properties';\nimport { direction, type } from './properties';\nexport function parseLegend(model) {\n  if (isUnitModel(model)) {\n    model.component.legends = parseUnitLegend(model);\n  } else {\n    model.component.legends = parseNonUnitLegend(model);\n  }\n}\n\nfunction parseUnitLegend(model) {\n  const encoding = model.encoding;\n  return [COLOR, FILL, STROKE, STROKEWIDTH, SIZE, SHAPE, OPACITY, FILLOPACITY, STROKEOPACITY].reduce((legendComponent, channel) => {\n    const def = encoding[channel];\n\n    if (model.legend(channel) && model.getScaleComponent(channel) && !(isFieldDef(def) && channel === SHAPE && def.type === GEOJSON)) {\n      legendComponent[channel] = parseLegendForChannel(model, channel);\n    }\n\n    return legendComponent;\n  }, {});\n}\n\nfunction getLegendDefWithScale(model, channel) {\n  const scale = model.scaleName(COLOR);\n\n  if (channel === 'color') {\n    return model.markDef.filled ? {\n      fill: scale\n    } : {\n      stroke: scale\n    };\n  }\n\n  return {\n    [channel]: model.scaleName(channel)\n  };\n}\n\nfunction isExplicit(value, property, legend, fieldDef) {\n  switch (property) {\n    case 'values':\n      // specified legend.values is already respected, but may get transformed.\n      return !!legend.values;\n\n    case 'title':\n      // title can be explicit if fieldDef.title is set\n      if (property === 'title' && value === fieldDef.title) {\n        return true;\n      }\n\n  } // Otherwise, things are explicit if the returned value matches the specified property\n\n\n  return value === legend[property];\n}\n\nexport function parseLegendForChannel(model, channel) {\n  const fieldDef = model.fieldDef(channel);\n  const legend = model.legend(channel);\n  const legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));\n\n  for (const property of LEGEND_COMPONENT_PROPERTIES) {\n    const value = getProperty(property, legend, channel, model);\n\n    if (value !== undefined) {\n      const explicit = isExplicit(value, property, legend, fieldDef);\n\n      if (explicit || model.config.legend[property] === undefined) {\n        legendCmpt.set(property, value, explicit);\n      }\n    }\n  }\n\n  const legendEncoding = legend.encoding || {};\n  const legendEncode = ['labels', 'legend', 'title', 'symbols', 'gradient'].reduce((e, part) => {\n    const legendEncodingPart = guideEncodeEntry(legendEncoding[part] || {}, model);\n    const value = encode[part] ? encode[part](fieldDef, legendEncodingPart, model, channel, legendCmpt) // apply rule\n    : legendEncodingPart; // no rule -- just default values\n\n    if (value !== undefined && keys(value).length > 0) {\n      e[part] = {\n        update: value\n      };\n    }\n\n    return e;\n  }, {});\n\n  if (keys(legendEncode).length > 0) {\n    legendCmpt.set('encode', legendEncode, !!legend.encoding);\n  }\n\n  return legendCmpt;\n}\n\nfunction getProperty(property, legend, channel, model) {\n  const encoding = model.encoding,\n        mark = model.mark;\n  const fieldDef = getTypedFieldDef(encoding[channel]);\n  const legendConfig = model.config.legend;\n  const timeUnit = fieldDef.timeUnit;\n  const scaleType = model.getScaleComponent(channel).get('type');\n\n  switch (property) {\n    // TODO: enable when https://github.com/vega/vega/issues/1351 is fixed\n    // case 'clipHeight':\n    //   return getFirstDefined(specifiedLegend.clipHeight, properties.clipHeight(properties.type(...)));\n    case 'direction':\n      return direction({\n        legend,\n        legendConfig,\n        timeUnit,\n        channel,\n        scaleType\n      });\n\n    case 'format':\n      // We don't include temporal field here as we apply format in encode block\n      if (isTimeFormatFieldDef(fieldDef)) {\n        return undefined;\n      }\n\n      return numberFormat(fieldDef, legend.format, model.config);\n\n    case 'formatType':\n      // As with format, we don't include temporal field here as we apply format in encode block\n      if (isTimeFormatFieldDef(fieldDef)) {\n        return undefined;\n      }\n\n      return legend.formatType;\n\n    case 'gradientLength':\n      return getFirstDefined( // do specified gradientLength first\n      legend.gradientLength, legendConfig.gradientLength, // Otherwise, use smart default based on plot height\n      properties.defaultGradientLength({\n        model,\n        legend,\n        legendConfig,\n        channel,\n        scaleType\n      }));\n\n    case 'labelOverlap':\n      return getFirstDefined(legend.labelOverlap, properties.defaultLabelOverlap(scaleType));\n\n    case 'symbolType':\n      return getFirstDefined(legend.symbolType, properties.defaultSymbolType(mark, channel, encoding.shape, model.markDef.shape));\n\n    case 'title':\n      return fieldDefTitle(fieldDef, model.config, {\n        allowDisabling: true\n      }) || undefined;\n\n    case 'type':\n      return type({\n        legend,\n        channel,\n        timeUnit,\n        scaleType,\n        alwaysReturn: false\n      });\n\n    case 'values':\n      return properties.values(legend, fieldDef);\n  } // Otherwise, return specified property.\n\n\n  return legend[property];\n}\n\nfunction parseNonUnitLegend(model) {\n  const _model$component = model.component,\n        legends = _model$component.legends,\n        resolve = _model$component.resolve;\n\n  for (const child of model.children) {\n    parseLegend(child);\n    keys(child.component.legends).forEach(channel => {\n      resolve.legend[channel] = parseGuideResolve(model.component.resolve, channel);\n\n      if (resolve.legend[channel] === 'shared') {\n        // If the resolve says shared (and has not been overridden)\n        // We will try to merge and see if there is a conflict\n        legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);\n\n        if (!legends[channel]) {\n          // If merge returns nothing, there is a conflict so we cannot make the legend shared.\n          // Thus, mark legend as independent and remove the legend component.\n          resolve.legend[channel] = 'independent';\n          delete legends[channel];\n        }\n      }\n    });\n  }\n\n  keys(legends).forEach(channel => {\n    for (const child of model.children) {\n      if (!child.component.legends[channel]) {\n        // skip if the child does not have a particular legend\n        continue;\n      }\n\n      if (resolve.legend[channel] === 'shared') {\n        // After merging shared legend, make sure to remove legend from child\n        delete child.component.legends[channel];\n      }\n    }\n  });\n  return legends;\n}\n\nexport function mergeLegendComponent(mergedLegend, childLegend) {\n  if (!mergedLegend) {\n    return childLegend.clone();\n  }\n\n  const mergedOrient = mergedLegend.getWithExplicit('orient');\n  const childOrient = childLegend.getWithExplicit('orient');\n\n  if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n    // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n    // Cannot merge due to inconsistent orient\n    return undefined;\n  }\n\n  let typeMerged = false; // Otherwise, let's merge\n\n  for (const prop of LEGEND_COMPONENT_PROPERTIES) {\n    const mergedValueWithExplicit = mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', // Tie breaker function\n    (v1, v2) => {\n      switch (prop) {\n        case 'symbolType':\n          return mergeSymbolType(v1, v2);\n\n        case 'title':\n          return mergeTitleComponent(v1, v2);\n\n        case 'type':\n          // There are only two types. If we have different types, then prefer symbol over gradient.\n          typeMerged = true;\n          return makeImplicit('symbol');\n      }\n\n      return defaultTieBreaker(v1, v2, prop, 'legend');\n    });\n    mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);\n  }\n\n  if (typeMerged) {\n    if (((mergedLegend.implicit || {}).encode || {}).gradient) {\n      deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);\n    }\n\n    if (((mergedLegend.explicit || {}).encode || {}).gradient) {\n      deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);\n    }\n  }\n\n  return mergedLegend;\n}\n\nfunction mergeSymbolType(st1, st2) {\n  if (st2.value === 'circle') {\n    // prefer \"circle\" over \"stroke\"\n    return st2;\n  }\n\n  return st1;\n}","map":null,"metadata":{},"sourceType":"module"}