{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { isObject } from 'vega-util';\nimport { isMarkDef } from '../mark';\nimport { isUnitSpec } from '../spec/unit';\nimport { stack } from '../stack';\nimport { keys, omit, pick } from '../util';\n\nfunction dropLineAndPoint(markDef) {\n  const _point = markDef.point,\n        _line = markDef.line,\n        mark = __rest(markDef, [\"point\", \"line\"]);\n\n  return keys(mark).length > 1 ? mark : mark.type;\n}\n\nfunction dropLineAndPointFromConfig(config) {\n  for (const mark of ['line', 'area', 'rule', 'trail']) {\n    if (config[mark]) {\n      config = Object.assign(Object.assign({}, config), {\n        // TODO: remove as any\n        [mark]: omit(config[mark], ['point', 'line'])\n      });\n    }\n  }\n\n  return config;\n}\n\nfunction getPointOverlay(markDef, markConfig = {}, encoding) {\n  if (markDef.point === 'transparent') {\n    return {\n      opacity: 0\n    };\n  } else if (markDef.point) {\n    // truthy : true or object\n    return isObject(markDef.point) ? markDef.point : {};\n  } else if (markDef.point !== undefined) {\n    // false or null\n    return null;\n  } else {\n    // undefined (not disabled)\n    if (markConfig.point || encoding.shape) {\n      // enable point overlay if config[mark].point is truthy or if encoding.shape is provided\n      return isObject(markConfig.point) ? markConfig.point : {};\n    } // markDef.point is defined as falsy\n\n\n    return undefined;\n  }\n}\n\nfunction getLineOverlay(markDef, markConfig = {}) {\n  if (markDef.line) {\n    // true or object\n    return markDef.line === true ? {} : markDef.line;\n  } else if (markDef.line !== undefined) {\n    // false or null\n    return null;\n  } else {\n    // undefined (not disabled)\n    if (markConfig.line) {\n      // enable line overlay if config[mark].line is truthy\n      return markConfig.line === true ? {} : markConfig.line;\n    } // markDef.point is defined as falsy\n\n\n    return undefined;\n  }\n}\n\nexport class PathOverlayNormalizer {\n  constructor() {\n    this.name = 'path-overlay';\n  }\n\n  hasMatchingType(spec, config) {\n    if (isUnitSpec(spec)) {\n      const mark = spec.mark,\n            encoding = spec.encoding;\n      const markDef = isMarkDef(mark) ? mark : {\n        type: mark\n      };\n\n      switch (markDef.type) {\n        case 'line':\n        case 'rule':\n        case 'trail':\n          return !!getPointOverlay(markDef, config[markDef.type], encoding);\n\n        case 'area':\n          return (// false / null are also included as we want to remove the properties\n            !!getPointOverlay(markDef, config[markDef.type], encoding) || !!getLineOverlay(markDef, config[markDef.type])\n          );\n      }\n    }\n\n    return false;\n  }\n\n  run(spec, params, normalize) {\n    const config = params.config;\n\n    const selection = spec.selection,\n          projection = spec.projection,\n          encoding = spec.encoding,\n          mark = spec.mark,\n          outerSpec = __rest(spec, [\"selection\", \"projection\", \"encoding\", \"mark\"]);\n\n    const markDef = isMarkDef(mark) ? mark : {\n      type: mark\n    };\n    const pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);\n    const lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);\n    const layer = [Object.assign(Object.assign({}, selection ? {\n      selection\n    } : {}), {\n      // Do not include point / line overlay in the normalize spec\n      mark: dropLineAndPoint(Object.assign(Object.assign({}, markDef), markDef.type === 'area' ? {\n        opacity: 0.7\n      } : {})),\n      // drop shape from encoding as this might be used to trigger point overlay\n      encoding: omit(encoding, ['shape'])\n    })]; // FIXME: determine rules for applying selections.\n    // Need to copy stack config to overlayed layer\n\n    const stackProps = stack(markDef, encoding);\n    let overlayEncoding = encoding;\n\n    if (stackProps) {\n      const stackFieldChannel = stackProps.fieldChannel,\n            offset = stackProps.offset;\n      overlayEncoding = Object.assign(Object.assign({}, encoding), {\n        [stackFieldChannel]: Object.assign(Object.assign({}, encoding[stackFieldChannel]), offset ? {\n          stack: offset\n        } : {})\n      });\n    }\n\n    if (lineOverlay) {\n      layer.push(Object.assign(Object.assign({}, projection ? {\n        projection\n      } : {}), {\n        mark: Object.assign(Object.assign({\n          type: 'line'\n        }, pick(markDef, ['clip', 'interpolate', 'tension', 'tooltip'])), lineOverlay),\n        encoding: overlayEncoding\n      }));\n    }\n\n    if (pointOverlay) {\n      layer.push(Object.assign(Object.assign({}, projection ? {\n        projection\n      } : {}), {\n        mark: Object.assign(Object.assign({\n          type: 'point',\n          opacity: 1,\n          filled: true\n        }, pick(markDef, ['clip', 'tooltip'])), pointOverlay),\n        encoding: overlayEncoding\n      }));\n    }\n\n    return normalize(Object.assign(Object.assign({}, outerSpec), {\n      layer\n    }), Object.assign(Object.assign({}, params), {\n      config: dropLineAndPointFromConfig(config)\n    }));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}