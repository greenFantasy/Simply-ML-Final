{"ast":null,"code":"import { SourceNode } from './source';\nimport { GraticuleNode } from './graticule';\nimport { SequenceNode } from './sequence';\n/**\n * Whether this dataflow node is the source of the dataflow that produces data i.e. a source or a generator.\n */\n\nexport function isDataSourceNode(node) {\n  return node instanceof SourceNode || node instanceof GraticuleNode || node instanceof SequenceNode;\n}\n/**\n * Abstract base class for BottomUpOptimizer and TopDownOptimizer.\n * Contains only mutation handling logic. Subclasses need to implement iteration logic.\n */\n\nclass OptimizerBase {\n  constructor() {\n    this._mutated = false;\n  } // Once true, _mutated is never set to false\n\n\n  setMutated() {\n    this._mutated = true;\n  }\n\n  get mutatedFlag() {\n    return this._mutated;\n  }\n\n}\n/**\n * Starts from a node and runs the optimization function(the \"run\" method) upwards to the root,\n * depending on the continueFlag and mutatedFlag values returned by the optimization function.\n */\n\n\nexport class BottomUpOptimizer extends OptimizerBase {\n  constructor() {\n    super();\n    this._continue = false;\n  }\n\n  setContinue() {\n    this._continue = true;\n  }\n\n  get continueFlag() {\n    return this._continue;\n  }\n\n  get flags() {\n    return {\n      continueFlag: this.continueFlag,\n      mutatedFlag: this.mutatedFlag\n    };\n  }\n\n  set flags({\n    continueFlag,\n    mutatedFlag\n  }) {\n    if (continueFlag) {\n      this.setContinue();\n    }\n\n    if (mutatedFlag) {\n      this.setMutated();\n    }\n  }\n  /**\n   * Reset the state of the optimizer after it has completed a run from the bottom of the tree to the top.\n   */\n\n\n  reset() {// do nothing\n  }\n\n  optimizeNextFromLeaves(node) {\n    if (isDataSourceNode(node)) {\n      return false;\n    }\n\n    const next = node.parent;\n\n    const _this$run = this.run(node),\n          continueFlag = _this$run.continueFlag;\n\n    if (continueFlag) {\n      this.optimizeNextFromLeaves(next);\n    }\n\n    return this.mutatedFlag;\n  }\n\n}\n/**\n * The optimizer function( the \"run\" method), is invoked on the given node and then continues recursively.\n */\n\nexport class TopDownOptimizer extends OptimizerBase {}","map":null,"metadata":{},"sourceType":"module"}