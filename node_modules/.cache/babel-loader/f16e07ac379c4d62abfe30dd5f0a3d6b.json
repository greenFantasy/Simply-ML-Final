{"ast":null,"code":"import * as log from '../log';\nimport { isHConcatSpec, isVConcatSpec } from '../spec';\nimport { BaseConcatModel } from './baseconcat';\nimport { buildModel } from './buildmodel';\nimport { parseConcatLayoutSize } from './layoutsize/parse';\nexport class ConcatModel extends BaseConcatModel {\n  constructor(spec, parent, parentGivenName, repeater, config) {\n    super(spec, 'concat', parent, parentGivenName, config, repeater, spec.resolve);\n\n    if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n      log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n    }\n\n    this.concatType = isVConcatSpec(spec) ? 'vconcat' : isHConcatSpec(spec) ? 'hconcat' : 'concat';\n    this.children = this.getChildren(spec).map((child, i) => {\n      return buildModel(child, this, this.getName('concat_' + i), undefined, repeater, config);\n    });\n  }\n\n  getChildren(spec) {\n    if (isVConcatSpec(spec)) {\n      return spec.vconcat;\n    } else if (isHConcatSpec(spec)) {\n      return spec.hconcat;\n    }\n\n    return spec.concat;\n  }\n\n  parseLayoutSize() {\n    parseConcatLayoutSize(this);\n  }\n\n  parseAxisGroup() {\n    return null;\n  }\n\n  assembleDefaultLayout() {\n    return Object.assign(Object.assign({}, this.concatType === 'vconcat' ? {\n      columns: 1\n    } : {}), {\n      bounds: 'full',\n      // Use align each so it can work with multiple plots with different size\n      align: 'each'\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}