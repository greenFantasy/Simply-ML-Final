{"ast":null,"code":"import { hasOwnProperty, stringValue } from 'vega-util';\nimport { FACET_CHANNELS } from '../../channel';\nimport { SELECTION_ID } from '../../selection';\nimport { isFacetModel } from '../model';\nimport interval from './interval';\nimport multi from './multi';\nimport single from './single';\nexport const STORE = '_store';\nexport const TUPLE = '_tuple';\nexport const MODIFY = '_modify';\nexport const SELECTION_DOMAIN = '_selection_domain_';\nexport const VL_SELECTION_RESOLVE = 'vlSelectionResolve';\nconst compilers = {\n  single,\n  multi,\n  interval\n};\nexport function forEachSelection(model, cb) {\n  const selections = model.component.selection;\n\n  for (const name in selections) {\n    if (hasOwnProperty(selections, name)) {\n      const sel = selections[name];\n      cb(sel, compilers[sel.type]);\n    }\n  }\n}\n\nfunction getFacetModel(model) {\n  let parent = model.parent;\n\n  while (parent) {\n    if (isFacetModel(parent)) {\n      break;\n    }\n\n    parent = parent.parent;\n  }\n\n  return parent;\n}\n\nexport function unitName(model, {\n  escape\n} = {\n  escape: true\n}) {\n  let name = escape ? stringValue(model.name) : model.name;\n  const facetModel = getFacetModel(model);\n\n  if (facetModel) {\n    const facet = facetModel.facet;\n\n    for (const channel of FACET_CHANNELS) {\n      if (facet[channel]) {\n        name += \" + '__facet_\".concat(channel, \"_' + (facet[\").concat(stringValue(facetModel.vgField(channel)), \"])\");\n      }\n    }\n  }\n\n  return name;\n}\nexport function requiresSelectionId(model) {\n  let identifier = false;\n  forEachSelection(model, selCmpt => {\n    identifier = identifier || selCmpt.project.items.some(proj => proj.field === SELECTION_ID);\n  });\n  return identifier;\n}\nexport function isRawSelectionDomain(domainRaw) {\n  return domainRaw.signal.indexOf(SELECTION_DOMAIN) >= 0;\n}","map":null,"metadata":{},"sourceType":"module"}