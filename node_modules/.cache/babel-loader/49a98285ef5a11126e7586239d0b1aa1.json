{"ast":null,"code":"import { vgField } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from './../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the join aggregate transform nodes.\n */\n\nexport class JoinAggregateTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n  }\n\n  clone() {\n    return new JoinAggregateTransformNode(null, duplicate(this.transform));\n  }\n\n  addDimensions(fields) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  dependentFields() {\n    const out = new Set();\n\n    if (this.transform.groupby) {\n      this.transform.groupby.forEach(f => out.add(f));\n    }\n\n    this.transform.joinaggregate.map(w => w.field).filter(f => f !== undefined).forEach(f => out.add(f));\n    return out;\n  }\n\n  producedFields() {\n    return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n  }\n\n  getDefaultName(joinAggregateFieldDef) {\n    return joinAggregateFieldDef.as || vgField(joinAggregateFieldDef);\n  }\n\n  hash() {\n    return \"JoinAggregateTransform \".concat(hash(this.transform));\n  }\n\n  assemble() {\n    const fields = [];\n    const ops = [];\n    const as = [];\n\n    for (const joinaggregate of this.transform.joinaggregate) {\n      ops.push(joinaggregate.op);\n      as.push(this.getDefaultName(joinaggregate));\n      fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n    }\n\n    const groupby = this.transform.groupby;\n    return Object.assign({\n      type: 'joinaggregate',\n      as,\n      ops,\n      fields\n    }, groupby !== undefined ? {\n      groupby\n    } : {});\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}