{"ast":null,"code":"import { isString, array } from 'vega-util';\nimport * as log from '../../log';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode, OutputNode } from './dataflow';\nimport { findSource } from './parse';\nimport { SourceNode } from './source';\nexport class LookupNode extends DataFlowNode {\n  constructor(parent, transform, secondary) {\n    super(parent);\n    this.transform = transform;\n    this.secondary = secondary;\n  }\n\n  clone() {\n    return new LookupNode(null, duplicate(this.transform), this.secondary);\n  }\n\n  static make(parent, model, transform, counter) {\n    const sources = model.component.data.sources;\n    let fromSource = findSource(transform.from.data, sources);\n\n    if (!fromSource) {\n      fromSource = new SourceNode(transform.from.data);\n      sources.push(fromSource);\n    }\n\n    const fromOutputName = model.getName(\"lookup_\".concat(counter));\n    const fromOutputNode = new OutputNode(fromSource, fromOutputName, 'lookup', model.component.data.outputNodeRefCounts);\n    model.component.data.outputNodes[fromOutputName] = fromOutputNode;\n    return new LookupNode(parent, transform, fromOutputNode.getSource());\n  }\n\n  dependentFields() {\n    return new Set([this.transform.lookup]);\n  }\n\n  producedFields() {\n    return new Set(this.transform.as ? array(this.transform.as) : this.transform.from.fields);\n  }\n\n  hash() {\n    return \"Lookup \".concat(hash({\n      transform: this.transform,\n      secondary: this.secondary\n    }));\n  }\n\n  assemble() {\n    let foreign;\n\n    if (this.transform.from.fields) {\n      // lookup a few fields and add create a flat output\n      foreign = Object.assign({\n        values: this.transform.from.fields\n      }, this.transform.as ? {\n        as: array(this.transform.as)\n      } : {});\n    } else {\n      // lookup full record and nest it\n      let asName = this.transform.as;\n\n      if (!isString(asName)) {\n        log.warn(log.message.NO_FIELDS_NEEDS_AS);\n        asName = '_lookup';\n      }\n\n      foreign = {\n        as: [asName]\n      };\n    }\n\n    return Object.assign(Object.assign({\n      type: 'lookup',\n      from: this.secondary,\n      key: this.transform.from.key,\n      fields: [this.transform.lookup]\n    }, foreign), this.transform.default ? {\n      default: this.transform.default\n    } : {});\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}