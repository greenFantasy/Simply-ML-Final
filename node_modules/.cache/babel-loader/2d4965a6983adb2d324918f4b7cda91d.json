{"ast":null,"code":"import { parse } from 'vega-expression';\n\nfunction getName(node) {\n  const name = [];\n\n  if (node.type === 'Identifier') {\n    return [node.name];\n  }\n\n  if (node.type === 'Literal') {\n    return [node.value];\n  }\n\n  if (node.type === 'MemberExpression') {\n    name.push(...getName(node.object));\n    name.push(...getName(node.property));\n  }\n\n  return name;\n}\n\nfunction startsWithDatum(node) {\n  if (node.object.type === 'MemberExpression') {\n    return startsWithDatum(node.object);\n  }\n\n  return node.object.name === 'datum';\n}\n\nexport function getDependentFields(expression) {\n  const ast = parse(expression);\n  const dependents = new Set();\n  ast.visit(node => {\n    if (node.type === 'MemberExpression' && startsWithDatum(node)) {\n      dependents.add(getName(node).slice(1).join('.'));\n    }\n  });\n  return dependents;\n}","map":null,"metadata":{},"sourceType":"module"}