{"ast":null,"code":"import { rectangle } from '../path/shapes';\nimport boundStroke from '../bound/boundStroke';\nimport { intersectRect } from '../util/intersect';\nimport { visit, pickVisit } from '../util/visit';\nimport stroke from '../util/canvas/stroke';\nimport fill from '../util/canvas/fill';\nimport { hitPath } from '../util/canvas/pick';\nimport clip from '../util/svg/clip';\nimport { translateItem } from '../util/svg/transform';\nvar StrokeOffset = 0.5;\n\nfunction attr(emit, item) {\n  emit('transform', translateItem(item));\n}\n\nfunction background(emit, item) {\n  var offset = item.stroke ? StrokeOffset : 0;\n  emit('class', 'background');\n  emit('d', rectangle(null, item, offset, offset));\n}\n\nfunction foreground(emit, item, renderer) {\n  var url = item.clip ? clip(renderer, item, item) : null;\n  emit('clip-path', url);\n}\n\nfunction bound(bounds, group) {\n  if (!group.clip && group.items) {\n    var items = group.items;\n\n    for (var j = 0, m = items.length; j < m; ++j) {\n      bounds.union(items[j].bounds);\n    }\n  }\n\n  if ((group.clip || group.width || group.height) && !group.noBound) {\n    bounds.add(0, 0).add(group.width || 0, group.height || 0);\n  }\n\n  boundStroke(bounds, group);\n  return bounds.translate(group.x || 0, group.y || 0);\n}\n\nfunction backgroundPath(context, group) {\n  var offset = group.stroke ? StrokeOffset : 0;\n  context.beginPath();\n  rectangle(context, group, offset, offset);\n}\n\nvar hitBackground = hitPath(backgroundPath);\n\nfunction draw(context, scene, bounds) {\n  var renderer = this;\n  visit(scene, function (group) {\n    var gx = group.x || 0,\n        gy = group.y || 0,\n        w = group.width || 0,\n        h = group.height || 0,\n        opacity; // setup graphics context\n\n    context.save();\n    context.translate(gx, gy); // draw group background\n\n    if (group.stroke || group.fill) {\n      opacity = group.opacity == null ? 1 : group.opacity;\n\n      if (opacity > 0) {\n        backgroundPath(context, group);\n\n        if (group.fill && fill(context, group, opacity)) {\n          context.fill();\n        }\n\n        if (group.stroke && stroke(context, group, opacity)) {\n          context.stroke();\n        }\n      }\n    } // set clip and bounds\n\n\n    if (group.clip) {\n      context.beginPath();\n      context.rect(0, 0, w, h);\n      context.clip();\n    }\n\n    if (bounds) bounds.translate(-gx, -gy); // draw group contents\n\n    visit(group, function (item) {\n      renderer.draw(context, item, bounds);\n    }); // restore graphics context\n\n    if (bounds) bounds.translate(gx, gy);\n    context.restore();\n  });\n}\n\nfunction pick(context, scene, x, y, gx, gy) {\n  if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {\n    return null;\n  }\n\n  var handler = this,\n      cx = x * context.pixelRatio,\n      cy = y * context.pixelRatio;\n  return pickVisit(scene, function (group) {\n    var hit, dx, dy, b; // first hit test against bounding box\n    // if a group is clipped, that should be handled by the bounds check.\n\n    b = group.bounds;\n    if (b && !b.contains(gx, gy)) return; // passed bounds check, so test sub-groups\n\n    dx = group.x || 0;\n    dy = group.y || 0;\n    context.save();\n    context.translate(dx, dy);\n    dx = gx - dx;\n    dy = gy - dy; // hit test against contained marks\n\n    hit = pickVisit(group, function (mark) {\n      return pickMark(mark, dx, dy) ? handler.pick(mark, x, y, dx, dy) : null;\n    }); // hit test against group background\n\n    if (!hit && scene.interactive !== false && (group.fill || group.stroke) && hitBackground(context, group, cx, cy)) {\n      hit = group;\n    }\n\n    context.restore();\n    return hit || null;\n  });\n}\n\nfunction pickMark(mark, x, y) {\n  return (mark.interactive !== false || mark.marktype === 'group') && mark.bounds && mark.bounds.contains(x, y);\n}\n\nexport default {\n  type: 'group',\n  tag: 'g',\n  nested: false,\n  attr: attr,\n  bound: bound,\n  draw: draw,\n  pick: pick,\n  isect: intersectRect,\n  background: background,\n  foreground: foreground\n};","map":null,"metadata":{},"sourceType":"module"}