{"ast":null,"code":"import { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { isValueDef } from '../../channeldef';\nimport { GEOJSON } from '../../type';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nimport { isString } from 'vega-util';\nexport class GeoJSONNode extends DataFlowNode {\n  constructor(parent, fields, geojson, signal) {\n    super(parent);\n    this.fields = fields;\n    this.geojson = geojson;\n    this.signal = signal;\n  }\n\n  clone() {\n    return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\n  }\n\n  static parseAll(parent, model) {\n    if (model.component.projection && !model.component.projection.isFit) {\n      return parent;\n    }\n\n    let geoJsonCounter = 0;\n    [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach(coordinates => {\n      const pair = coordinates.map(channel => model.channelHasField(channel) ? model.fieldDef(channel).field : isValueDef(model.encoding[channel]) ? {\n        expr: model.encoding[channel].value + ''\n      } : undefined);\n\n      if (pair[0] || pair[1]) {\n        parent = new GeoJSONNode(parent, pair, null, model.getName(\"geojson_\".concat(geoJsonCounter++)));\n      }\n    });\n\n    if (model.channelHasField(SHAPE)) {\n      const fieldDef = model.fieldDef(SHAPE);\n\n      if (fieldDef.type === GEOJSON) {\n        parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(\"geojson_\".concat(geoJsonCounter++)));\n      }\n    }\n\n    return parent;\n  }\n\n  dependentFields() {\n    return new Set([...(this.geojson ? [this.geojson] : []), ...(this.fields || []).filter(isString)]);\n  }\n\n  producedFields() {\n    return new Set();\n  }\n\n  hash() {\n    return \"GeoJSON \".concat(this.geojson, \" \").concat(this.signal, \" \").concat(hash(this.fields));\n  }\n\n  assemble() {\n    return Object.assign(Object.assign(Object.assign({\n      type: 'geojson'\n    }, this.fields ? {\n      fields: this.fields\n    } : {}), this.geojson ? {\n      geojson: this.geojson\n    } : {}), {\n      signal: this.signal\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}