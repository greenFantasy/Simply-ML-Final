{"ast":null,"code":"import { isString } from 'vega-util';\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2 } from '../../channel';\nimport { isValueDef } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class GeoPointNode extends DataFlowNode {\n  constructor(parent, projection, fields, as) {\n    super(parent);\n    this.projection = projection;\n    this.fields = fields;\n    this.as = as;\n  }\n\n  clone() {\n    return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));\n  }\n\n  static parseAll(parent, model) {\n    if (!model.projectionName()) {\n      return parent;\n    }\n\n    [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach(coordinates => {\n      const pair = coordinates.map(channel => model.channelHasField(channel) ? model.fieldDef(channel).field : isValueDef(model.encoding[channel]) ? {\n        expr: model.encoding[channel].value + ''\n      } : undefined);\n      const suffix = coordinates[0] === LONGITUDE2 ? '2' : '';\n\n      if (pair[0] || pair[1]) {\n        parent = new GeoPointNode(parent, model.projectionName(), pair, [model.getName('x' + suffix), model.getName('y' + suffix)]);\n      }\n    });\n    return parent;\n  }\n\n  dependentFields() {\n    return new Set(this.fields.filter(isString));\n  }\n\n  producedFields() {\n    return new Set(this.as);\n  }\n\n  hash() {\n    return \"Geopoint \".concat(this.projection, \" \").concat(hash(this.fields), \" \").concat(hash(this.as));\n  }\n\n  assemble() {\n    return {\n      type: 'geopoint',\n      projection: this.projection,\n      fields: this.fields,\n      as: this.as\n    };\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}