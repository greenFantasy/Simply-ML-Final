{"ast":null,"code":"import { isArray } from 'vega-util';\nimport { isBinning } from '../bin';\nimport { COLUMN, FACET_CHANNELS, ROW } from '../channel';\nimport { normalize, vgField } from '../channeldef';\nimport { reduce } from '../encoding';\nimport * as log from '../log';\nimport { hasDiscreteDomain } from '../scale';\nimport { DEFAULT_SORT_OP, isSortField } from '../sort';\nimport { isFacetMapping } from '../spec/facet';\nimport { contains } from '../util';\nimport { isVgRangeStep } from '../vega.schema';\nimport { buildModel } from './buildmodel';\nimport { assembleFacetData } from './data/assemble';\nimport { sortArrayIndexField } from './data/calculate';\nimport { parseData } from './data/parse';\nimport { assembleLabelTitle } from './header/assemble';\nimport { getHeaderChannel, getHeaderProperty } from './header/common';\nimport { HEADER_CHANNELS, HEADER_TYPES } from './header/component';\nimport { parseFacetHeaders } from './header/parse';\nimport { parseChildrenLayoutSize } from './layoutsize/parse';\nimport { ModelWithField } from './model';\nimport { replaceRepeaterInFacet } from './repeater';\nimport { assembleDomain, getFieldFromDomain } from './scale/domain';\nimport { assembleFacetSignals } from './selection/assemble';\nexport function facetSortFieldName(fieldDef, sort, opt) {\n  return vgField(sort, Object.assign({\n    suffix: \"by_\".concat(vgField(fieldDef))\n  }, opt || {}));\n}\nexport class FacetModel extends ModelWithField {\n  constructor(spec, parent, parentGivenName, repeater, config) {\n    super(spec, 'facet', parent, parentGivenName, config, repeater, spec.resolve);\n    this.child = buildModel(spec.spec, this, this.getName('child'), undefined, repeater, config);\n    this.children = [this.child];\n    const facet = replaceRepeaterInFacet(spec.facet, repeater);\n    this.facet = this.initFacet(facet);\n  }\n\n  initFacet(facet) {\n    // clone to prevent side effect to the original spec\n    if (!isFacetMapping(facet)) {\n      return {\n        facet: normalize(facet, 'facet')\n      };\n    }\n\n    return reduce(facet, (normalizedFacet, fieldDef, channel) => {\n      if (!contains([ROW, COLUMN], channel)) {\n        // Drop unsupported channel\n        log.warn(log.message.incompatibleChannel(channel, 'facet'));\n        return normalizedFacet;\n      }\n\n      if (fieldDef.field === undefined) {\n        log.warn(log.message.emptyFieldDef(fieldDef, channel));\n        return normalizedFacet;\n      } // Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n\n\n      normalizedFacet[channel] = normalize(fieldDef, channel);\n      return normalizedFacet;\n    }, {});\n  }\n\n  channelHasField(channel) {\n    return !!this.facet[channel];\n  }\n\n  fieldDef(channel) {\n    return this.facet[channel];\n  }\n\n  parseData() {\n    this.component.data = parseData(this);\n    this.child.parseData();\n  }\n\n  parseLayoutSize() {\n    parseChildrenLayoutSize(this);\n  }\n\n  parseSelections() {\n    // As a facet has a single child, the selection components are the same.\n    // The child maintains its selections to assemble signals, which remain\n    // within its unit.\n    this.child.parseSelections();\n    this.component.selection = this.child.component.selection;\n  }\n\n  parseMarkGroup() {\n    this.child.parseMarkGroup();\n  }\n\n  parseAxesAndHeaders() {\n    this.child.parseAxesAndHeaders();\n    parseFacetHeaders(this);\n  }\n\n  assembleSelectionTopLevelSignals(signals) {\n    return this.child.assembleSelectionTopLevelSignals(signals);\n  }\n\n  assembleSignals() {\n    this.child.assembleSignals();\n    return [];\n  }\n\n  assembleSelectionData(data) {\n    return this.child.assembleSelectionData(data);\n  }\n\n  getHeaderLayoutMixins() {\n    const layoutMixins = {};\n\n    for (const channel of FACET_CHANNELS) {\n      for (const headerType of HEADER_TYPES) {\n        const layoutHeaderComponent = this.component.layoutHeaders[channel];\n        const headerComponent = layoutHeaderComponent[headerType];\n        const facetFieldDef = layoutHeaderComponent.facetFieldDef;\n\n        if (facetFieldDef) {\n          const titleOrient = getHeaderProperty('titleOrient', facetFieldDef, this.config, channel);\n\n          if (contains(['right', 'bottom'], titleOrient)) {\n            const headerChannel = getHeaderChannel(channel, titleOrient);\n            layoutMixins.titleAnchor = layoutMixins.titleAnchor || {};\n            layoutMixins.titleAnchor[headerChannel] = 'end';\n          }\n        }\n\n        if (headerComponent && headerComponent[0]) {\n          // set header/footerBand\n          const sizeType = channel === 'row' ? 'height' : 'width';\n          const bandType = headerType === 'header' ? 'headerBand' : 'footerBand';\n\n          if (channel !== 'facet' && !this.child.component.layoutSize.get(sizeType)) {\n            // If facet child does not have size signal, then apply headerBand\n            layoutMixins[bandType] = layoutMixins[bandType] || {};\n            layoutMixins[bandType][channel] = 0.5;\n          }\n\n          if (layoutHeaderComponent.title) {\n            layoutMixins.offset = layoutMixins.offset || {};\n            layoutMixins.offset[channel === 'row' ? 'rowTitle' : 'columnTitle'] = 10;\n          }\n        }\n      }\n    }\n\n    return layoutMixins;\n  }\n\n  assembleDefaultLayout() {\n    const _this$facet = this.facet,\n          column = _this$facet.column,\n          row = _this$facet.row;\n    const columns = column ? this.columnDistinctSignal() : row ? 1 : undefined;\n    let align = 'all'; // Do not align the cells if the scale corresponding to the direction is indepent.\n    // We always align when we facet into both row and column.\n\n    if (!row && this.component.resolve.scale.x === 'independent') {\n      align = 'none';\n    } else if (!column && this.component.resolve.scale.y === 'independent') {\n      align = 'none';\n    }\n\n    return Object.assign(Object.assign(Object.assign({}, this.getHeaderLayoutMixins()), columns ? {\n      columns\n    } : {}), {\n      bounds: 'full',\n      align\n    });\n  }\n\n  assembleLayoutSignals() {\n    // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.\n    return this.child.assembleLayoutSignals();\n  }\n\n  columnDistinctSignal() {\n    if (this.parent && this.parent instanceof FacetModel) {\n      // For nested facet, we will add columns to group mark instead\n      // See discussion in https://github.com/vega/vega/issues/952\n      // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n      return undefined;\n    } else {\n      // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.\n      const facetLayoutDataName = this.getName('column_domain');\n      return {\n        signal: \"length(data('\".concat(facetLayoutDataName, \"'))\")\n      };\n    }\n  }\n\n  assembleGroup(signals) {\n    if (this.parent && this.parent instanceof FacetModel) {\n      // Provide number of columns for layout.\n      // See discussion in https://github.com/vega/vega/issues/952\n      // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n      return Object.assign(Object.assign({}, this.channelHasField('column') ? {\n        encode: {\n          update: {\n            // TODO(https://github.com/vega/vega-lite/issues/2759):\n            // Correct the signal for facet of concat of facet_column\n            columns: {\n              field: vgField(this.facet.column, {\n                prefix: 'distinct'\n              })\n            }\n          }\n        }\n      } : {}), super.assembleGroup(signals));\n    }\n\n    return super.assembleGroup(signals);\n  }\n  /**\n   * Aggregate cardinality for calculating size\n   */\n\n\n  getCardinalityAggregateForChild() {\n    const fields = [];\n    const ops = [];\n    const as = [];\n\n    if (this.child instanceof FacetModel) {\n      if (this.child.channelHasField('column')) {\n        const field = vgField(this.child.facet.column);\n        fields.push(field);\n        ops.push('distinct');\n        as.push(\"distinct_\".concat(field));\n      }\n    } else {\n      for (const channel of ['x', 'y']) {\n        const childScaleComponent = this.child.component.scales[channel];\n\n        if (childScaleComponent && !childScaleComponent.merged) {\n          const type = childScaleComponent.get('type');\n          const range = childScaleComponent.get('range');\n\n          if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n            const domain = assembleDomain(this.child, channel);\n            const field = getFieldFromDomain(domain);\n\n            if (field) {\n              fields.push(field);\n              ops.push('distinct');\n              as.push(\"distinct_\".concat(field));\n            } else {\n              log.warn(\"Unknown field for \".concat(channel, \". Cannot calculate view size.\"));\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      fields,\n      ops,\n      as\n    };\n  }\n\n  assembleFacet() {\n    const _this$component$data$ = this.component.data.facetRoot,\n          name = _this$component$data$.name,\n          data = _this$component$data$.data;\n    const _this$facet2 = this.facet,\n          row = _this$facet2.row,\n          column = _this$facet2.column;\n\n    const _this$getCardinalityA = this.getCardinalityAggregateForChild(),\n          fields = _this$getCardinalityA.fields,\n          ops = _this$getCardinalityA.ops,\n          as = _this$getCardinalityA.as;\n\n    const groupby = [];\n\n    for (const channel of FACET_CHANNELS) {\n      const fieldDef = this.facet[channel];\n\n      if (fieldDef) {\n        groupby.push(vgField(fieldDef));\n        const bin = fieldDef.bin,\n              sort = fieldDef.sort;\n\n        if (isBinning(bin)) {\n          groupby.push(vgField(fieldDef, {\n            binSuffix: 'end'\n          }));\n        }\n\n        if (isSortField(sort)) {\n          const field = sort.field,\n                _sort$op = sort.op,\n                op = _sort$op === void 0 ? DEFAULT_SORT_OP : _sort$op;\n          const outputName = facetSortFieldName(fieldDef, sort);\n\n          if (row && column) {\n            // For crossed facet, use pre-calculate field as it requires a different groupby\n            // For each calculated field, apply max and assign them to the same name as\n            // all values of the same group should be the same anyway.\n            fields.push(outputName);\n            ops.push('max');\n            as.push(outputName);\n          } else {\n            fields.push(field);\n            ops.push(op);\n            as.push(outputName);\n          }\n        } else if (isArray(sort)) {\n          const outputName = sortArrayIndexField(fieldDef, channel);\n          fields.push(outputName);\n          ops.push('max');\n          as.push(outputName);\n        }\n      }\n    }\n\n    const cross = !!row && !!column;\n    return Object.assign({\n      name,\n      data,\n      groupby\n    }, cross || fields.length ? {\n      aggregate: Object.assign(Object.assign({}, cross ? {\n        cross\n      } : {}), fields.length ? {\n        fields,\n        ops,\n        as\n      } : {})\n    } : {});\n  }\n\n  facetSortFields(channel) {\n    const facet = this.facet;\n    const fieldDef = facet[channel];\n\n    if (fieldDef) {\n      if (isSortField(fieldDef.sort)) {\n        return [facetSortFieldName(fieldDef, fieldDef.sort, {\n          expr: 'datum'\n        })];\n      } else if (isArray(fieldDef.sort)) {\n        return [sortArrayIndexField(fieldDef, channel, {\n          expr: 'datum'\n        })];\n      }\n\n      return [vgField(fieldDef, {\n        expr: 'datum'\n      })];\n    }\n\n    return [];\n  }\n\n  facetSortOrder(channel) {\n    const facet = this.facet;\n    const fieldDef = facet[channel];\n\n    if (fieldDef) {\n      const sort = fieldDef.sort;\n      const order = (isSortField(sort) ? sort.order : !isArray(sort) && sort) || 'ascending';\n      return [order];\n    }\n\n    return [];\n  }\n\n  assembleLabelTitle() {\n    const facet = this.facet,\n          config = this.config;\n\n    if (facet.facet) {\n      // Facet always uses title to display labels\n      return assembleLabelTitle(facet.facet, 'facet', config);\n    }\n\n    const ORTHOGONAL_ORIENT = {\n      row: ['top', 'bottom'],\n      column: ['left', 'right']\n    };\n\n    for (const channel of HEADER_CHANNELS) {\n      if (facet[channel]) {\n        const labelOrient = getHeaderProperty('labelOrient', facet[channel], config, channel);\n\n        if (contains(ORTHOGONAL_ORIENT[channel], labelOrient)) {\n          // Row/Column with orthogonal labelOrient must use title to display labels\n          return assembleLabelTitle(facet[channel], channel, config);\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  assembleMarks() {\n    const child = this.child; // If we facet by two dimensions, we need to add a cross operator to the aggregation\n    // so that we create all groups\n\n    const facetRoot = this.component.data.facetRoot;\n    const data = assembleFacetData(facetRoot);\n    const encodeEntry = child.assembleGroupEncodeEntry(false);\n    const title = this.assembleLabelTitle() || child.assembleTitle();\n    const style = child.assembleGroupStyle();\n    const markGroup = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n      name: this.getName('cell'),\n      type: 'group'\n    }, title ? {\n      title\n    } : {}), style ? {\n      style\n    } : {}), {\n      from: {\n        facet: this.assembleFacet()\n      },\n      // TODO: move this to after data\n      sort: {\n        field: FACET_CHANNELS.map(c => this.facetSortFields(c)).flat(),\n        order: FACET_CHANNELS.map(c => this.facetSortOrder(c)).flat()\n      }\n    }), data.length > 0 ? {\n      data: data\n    } : {}), encodeEntry ? {\n      encode: {\n        update: encodeEntry\n      }\n    } : {}), child.assembleGroup(assembleFacetSignals(this, [])));\n    return [markGroup];\n  }\n\n  getMapping() {\n    return this.facet;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}