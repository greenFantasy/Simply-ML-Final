{"ast":null,"code":"import { isArray } from 'vega-util';\nimport * as log from '../log';\nimport { BaseConcatModel } from './baseconcat';\nimport { buildModel } from './buildmodel';\nimport { parseRepeatLayoutSize } from './layoutsize/parse';\nexport class RepeatModel extends BaseConcatModel {\n  constructor(spec, parent, parentGivenName, repeatValues, config) {\n    super(spec, 'repeat', parent, parentGivenName, config, repeatValues, spec.resolve);\n\n    if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n      log.warn(log.message.REPEAT_CANNOT_SHARE_AXIS);\n    }\n\n    this.repeat = spec.repeat;\n    this.children = this._initChildren(spec, this.repeat, repeatValues, config);\n  }\n\n  _initChildren(spec, repeat, repeater, config) {\n    const children = [];\n    const row = !isArray(repeat) && repeat.row || [repeater ? repeater.row : null];\n    const column = !isArray(repeat) && repeat.column || [repeater ? repeater.column : null];\n    const repeatValues = isArray(repeat) && repeat || [repeater ? repeater.repeat : null]; // cross product\n\n    for (const repeatValue of repeatValues) {\n      for (const rowValue of row) {\n        for (const columnValue of column) {\n          const name = (repeatValue ? \"__repeat_repeat_\".concat(repeatValue) : '') + (rowValue ? \"__repeat_row_\".concat(rowValue) : '') + (columnValue ? \"__repeat_column_\".concat(columnValue) : '');\n          const childRepeat = {\n            repeat: repeatValue,\n            row: rowValue,\n            column: columnValue\n          };\n          children.push(buildModel(spec.spec, this, this.getName('child' + name), undefined, childRepeat, config));\n        }\n      }\n    }\n\n    return children;\n  }\n\n  parseLayoutSize() {\n    parseRepeatLayoutSize(this);\n  }\n\n  assembleDefaultLayout() {\n    const repeat = this.repeat;\n    const columns = isArray(repeat) ? undefined : repeat.column ? repeat.column.length : 1;\n    return Object.assign(Object.assign({}, columns ? {\n      columns\n    } : {}), {\n      bounds: 'full',\n      align: 'all'\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}