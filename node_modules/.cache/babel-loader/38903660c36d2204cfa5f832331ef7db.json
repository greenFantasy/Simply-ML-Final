{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { isArray, isObject, isString } from 'vega-util';\n/**\n * Format the value to be shown in the toolip.\n *\n * @param value The value to show in the tooltip.\n * @param valueToHtml Function to convert a single cell value to an HTML string\n */\n\nexport function formatValue(value, valueToHtml, maxDepth) {\n  if (isArray(value)) {\n    return \"[\".concat(value.map(v => valueToHtml(isString(v) ? v : stringify(v, maxDepth))).join(', '), \"]\");\n  }\n\n  if (isObject(value)) {\n    let content = '';\n\n    const _a = value,\n          title = _a.title,\n          rest = __rest(_a, [\"title\"]);\n\n    if (title) {\n      content += \"<h2>\".concat(valueToHtml(title), \"</h2>\");\n    }\n\n    const keys = Object.keys(rest);\n\n    if (keys.length > 0) {\n      content += '<table>';\n\n      for (const key of keys) {\n        let val = rest[key]; // ignore undefined properties\n\n        if (val === undefined) {\n          continue;\n        }\n\n        if (isObject(val)) {\n          val = stringify(val, maxDepth);\n        }\n\n        content += \"<tr><td class=\\\"key\\\">\".concat(valueToHtml(key), \":</td><td class=\\\"value\\\">\").concat(valueToHtml(val), \"</td></tr>\");\n      }\n\n      content += \"</table>\";\n    }\n\n    return content || '{}'; // show empty object if there are no properties\n  }\n\n  return valueToHtml(value);\n}\nexport function replacer(maxDepth) {\n  const stack = [];\n  return function (key, value) {\n    if (typeof value !== 'object' || value === null) {\n      return value;\n    }\n\n    const pos = stack.indexOf(this) + 1;\n    stack.length = pos;\n\n    if (stack.length > maxDepth) {\n      return '[Object]';\n    }\n\n    if (stack.indexOf(value) >= 0) {\n      return '[Circular]';\n    }\n\n    stack.push(value);\n    return value;\n  };\n}\n/**\n * Stringify any JS object to valid JSON\n */\n\nexport function stringify(obj, maxDepth) {\n  return JSON.stringify(obj, replacer(maxDepth));\n}","map":null,"metadata":{},"sourceType":"module"}