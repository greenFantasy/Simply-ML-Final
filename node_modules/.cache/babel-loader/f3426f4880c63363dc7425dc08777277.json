{"ast":null,"code":"import { isAggregateOp } from '../../aggregate';\nimport { vgField } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from './../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the window transform nodes\n */\n\nexport class WindowTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n  }\n\n  clone() {\n    return new WindowTransformNode(null, duplicate(this.transform));\n  }\n\n  addDimensions(fields) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  dependentFields() {\n    const out = new Set();\n    (this.transform.groupby || []).forEach(f => out.add(f));\n    (this.transform.sort || []).forEach(m => out.add(m.field));\n    this.transform.window.map(w => w.field).filter(f => f !== undefined).forEach(f => out.add(f));\n    return out;\n  }\n\n  producedFields() {\n    return new Set(this.transform.window.map(this.getDefaultName));\n  }\n\n  getDefaultName(windowFieldDef) {\n    return windowFieldDef.as || vgField(windowFieldDef);\n  }\n\n  hash() {\n    return \"WindowTransform \".concat(hash(this.transform));\n  }\n\n  assemble() {\n    const fields = [];\n    const ops = [];\n    const as = [];\n    const params = [];\n\n    for (const window of this.transform.window) {\n      ops.push(window.op);\n      as.push(this.getDefaultName(window));\n      params.push(window.param === undefined ? null : window.param);\n      fields.push(window.field === undefined ? null : window.field);\n    }\n\n    const frame = this.transform.frame;\n    const groupby = this.transform.groupby;\n\n    if (frame && frame[0] === null && frame[1] === null && ops.every(o => isAggregateOp(o))) {\n      // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate\n      return Object.assign({\n        type: 'joinaggregate',\n        as,\n        ops: ops,\n        fields\n      }, groupby !== undefined ? {\n        groupby\n      } : {});\n    }\n\n    const sortFields = [];\n    const sortOrder = [];\n\n    if (this.transform.sort !== undefined) {\n      for (const sortField of this.transform.sort) {\n        sortFields.push(sortField.field);\n        sortOrder.push(sortField.order || 'ascending');\n      }\n    }\n\n    const sort = {\n      field: sortFields,\n      order: sortOrder\n    };\n    const ignorePeers = this.transform.ignorePeers;\n    return Object.assign(Object.assign(Object.assign({\n      type: 'window',\n      params,\n      as,\n      ops,\n      fields,\n      sort\n    }, ignorePeers !== undefined ? {\n      ignorePeers\n    } : {}), groupby !== undefined ? {\n      groupby\n    } : {}), frame !== undefined ? {\n      frame\n    } : {});\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}