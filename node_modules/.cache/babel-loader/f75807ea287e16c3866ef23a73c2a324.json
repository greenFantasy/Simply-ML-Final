{"ast":null,"code":"import { duplicate, hash, unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for pivot transform nodes.\n */\n\nexport class PivotTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n  }\n\n  clone() {\n    return new PivotTransformNode(null, duplicate(this.transform));\n  }\n\n  addDimensions(fields) {\n    this.transform.groupby = unique((this.transform.groupby || []).concat(fields), d => d);\n  }\n\n  producedFields() {\n    return undefined; // return undefined so that potentially everything can depend on the pivot\n  }\n\n  dependentFields() {\n    return new Set([this.transform.pivot, this.transform.value, ...(this.transform.groupby || [])]);\n  }\n\n  hash() {\n    return \"PivotTransform \".concat(hash(this.transform));\n  }\n\n  assemble() {\n    const _this$transform = this.transform,\n          pivot = _this$transform.pivot,\n          value = _this$transform.value,\n          groupby = _this$transform.groupby,\n          limit = _this$transform.limit,\n          op = _this$transform.op;\n    return Object.assign(Object.assign(Object.assign({\n      type: 'pivot',\n      field: pivot,\n      value\n    }, limit !== undefined ? {\n      limit\n    } : {}), op !== undefined ? {\n      op\n    } : {}), groupby !== undefined ? {\n      groupby\n    } : {});\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}