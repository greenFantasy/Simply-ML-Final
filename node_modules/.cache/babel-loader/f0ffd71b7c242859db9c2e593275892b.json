{"ast":null,"code":"/**\n * Vega-Lite's singleton logger utility.\n */\nimport { logger, Warn } from 'vega-util';\nimport * as message_ from './message';\nexport const message = message_;\n/**\n * Main (default) Vega Logger instance for Vega-Lite.\n */\n\nconst main = logger(Warn);\nlet current = main;\n/**\n * Logger tool for checking if the code throws correct warning.\n */\n\nexport class LocalLogger {\n  constructor() {\n    this.warns = [];\n    this.infos = [];\n    this.debugs = [];\n  }\n\n  level() {\n    return this;\n  }\n\n  warn(...args) {\n    this.warns.push(...args);\n    return this;\n  }\n\n  info(...args) {\n    this.infos.push(...args);\n    return this;\n  }\n\n  debug(...args) {\n    this.debugs.push(...args);\n    return this;\n  }\n\n  error(...args) {\n    throw Error(...args);\n  }\n\n}\nexport function wrap(f) {\n  return () => {\n    current = new LocalLogger();\n    f(current);\n    reset();\n  };\n}\n/**\n * Set the singleton logger to be a custom logger.\n */\n\nexport function set(newLogger) {\n  current = newLogger;\n  return current;\n}\n/**\n * Reset the main logger to use the default Vega Logger.\n */\n\nexport function reset() {\n  current = main;\n  return current;\n}\nexport function warn(...args) {\n  current.warn(...args);\n}\nexport function info(...args) {\n  current.info(...args);\n}\nexport function debug(...args) {\n  current.debug(...args);\n}","map":null,"metadata":{},"sourceType":"module"}