{"ast":null,"code":"import _slicedToArray from \"/Users/rajatmittal/Documents/SimplyML/Simply-ML/panels/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rajatmittal/Documents/SimplyML/Simply-ML/panels/src/App.js\";\nimport React, { Component } from 'react'; //import logo from './logo.svg';\n\nimport './App.css'; //import Tabs from './components/Tabs';\n\nimport Building from './components/building/Building';\nimport Background from './components/background/Background';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis'; //import background from './background.png';\n\nrequire('./App.css');\n/**\n * Get the car data reduced to just the variables we are interested\n * and cleaned of missing data.\n */\n\n\nfunction cleanData(data) {\n  const features = data.features;\n  const X_in = data.X;\n  const y_in = data.y;\n  let norm_data = {};\n  norm_data.X = [];\n\n  for (var j = 0; j < X_in[0].length; j++) {\n    let max = -10000000;\n    let min = 10000000;\n\n    for (var i = 0; i < X_in.length; i++) {\n      if (X_in[i][j] > max) {\n        max = X_in[i][j];\n      }\n\n      if (X_in[i][j] < min) {\n        min = X_in[i][j];\n      }\n    }\n\n    for (var i2 = 0; i2 < X_in.length; i2++) {\n      X_in[i2][j] = (X_in[i2][j] - min) / (max - min);\n    }\n\n    norm_data.X.push({\n      min: min,\n      max: max\n    });\n  }\n\n  let max = -10000000;\n  let min = 10000000;\n\n  for (var j2 = 0; j2 < y_in.length; j2++) {\n    if (y_in[j2][0] > max) {\n      max = y_in[j2][0];\n    }\n\n    if (y_in[j2][0] < min) {\n      min = y_in[j2][0];\n    }\n  }\n\n  for (var j3 = 0; j3 < y_in.length; j3++) {\n    y_in[j3][0] = (y_in[j3][0] - min) / (max - min);\n  }\n\n  norm_data.y = {\n    min: min,\n    max: max\n  };\n  let train_X = [];\n  let train_y = [];\n  let test_X = [];\n  let test_y = [];\n  let split = 0.8;\n\n  for (var i3 = 0; i3 < X_in.length; i3++) {\n    if (Math.random() < split) {\n      train_X.push(X_in[i3]);\n      train_y.push(y_in[i3]);\n    } else {\n      test_X.push(X_in[i3]);\n      test_y.push(y_in[i3]);\n    }\n  }\n\n  return {\n    trainX: train_X,\n    trainy: train_y,\n    testX: test_X,\n    testy: test_y,\n    features: features,\n    norm_data: norm_data\n  };\n}\n/**\n * Convert the input data to tensors that we can use for machine\n * learning. We will also do the important best practices of _shuffling_\n * the data and _normalizing_ the data\n * MPG on the y-axis.\n */\n\n\nfunction convertToTensor(data, norm) {\n  // Wrapping these calculations in a tidy will dispose any\n  // intermediate tensors.\n  return tf.tidy(() => {\n    // Step 1. Shuffle the data\n    //tf.util.shuffle(data);\n    // Step 2. Convert data to Tensor\n    const inputs = data.X;\n    const labels = data.y;\n    const inputTensor = tf.tensor2d(inputs, [inputs.length, inputs[0].length]);\n    const labelTensor = tf.tensor2d(labels, [labels.length, labels[0].length]);\n    return {\n      inputs: inputTensor,\n      labels: labelTensor\n    };\n  });\n}\n\nasync function trainModel(model, inputs, labels, features) {\n  // Prepare the model for training.\n  model.compile({\n    optimizer: tf.train.adam(),\n    loss: tf.losses.meanSquaredError,\n    metrics: ['mse', 'acc']\n  });\n  const batchSize = 32;\n  const epochs = parseInt(document.getElementById(\"epochs\").value);\n\n  if (!isNaN(epochs) && epochs > 0) {\n    return await model.fit(inputs, labels, {\n      batchSize,\n      epochs,\n      shuffle: true,\n      callbacks: tfvis.show.fitCallbacks({\n        name: 'Training Performance'\n      }, ['loss'], {\n        height: 200\n      })\n    });\n  }\n}\n\nasync function testModel(model, inputData) {\n  const _tf$tidy = tf.tidy(() => {\n    const xs = tf.tensor2d(inputData.X, [inputData.X.length, inputData.X[0].length]);\n    const preds = model.predict(xs);\n    return [xs.arraySync(), preds.arraySync()];\n  }),\n        _tf$tidy2 = _slicedToArray(_tf$tidy, 2),\n        xs = _tf$tidy2[0],\n        preds = _tf$tidy2[1];\n\n  let table = document.getElementById(\"error-table\");\n  table.style.display = \"block\";\n  let ymax = inputData.norm_data.y.max;\n  let ymin = inputData.norm_data.y.min;\n  let ranges = [0.01, 0.05, 0.1, 0.2];\n  let ranges_counts = [];\n\n  for (var k in ranges) {\n    ranges_counts.push(0);\n  }\n\n  for (var p = 0; p < inputData.X.length; p++) {\n    let y = (ymax - ymin) * inputData.y[p][0] + ymin;\n    let y_hat = (ymax - ymin) * preds[p][0] + ymin;\n    let error = Math.abs((y_hat - y) / y);\n    console.log(error);\n\n    for (var r = 0; r < ranges.length; r++) {\n      if (error < ranges[r]) {\n        ranges_counts[r] += 1.0 / inputData.X.length;\n        break;\n      }\n    }\n  }\n\n  while (table.firstChild) {\n    table.removeChild(table.firstChild);\n  }\n\n  for (var j in ranges) {\n    var e = document.createElement(\"LI\");\n    e.className = \"error-table-li\";\n    var te = document.createTextNode(\"Less than \" + (100 * ranges[j]).toFixed(0) + \"%: \" + (100 * ranges_counts[j]).toFixed(1) + \"%\");\n    e.appendChild(te);\n    table.appendChild(e);\n  }\n\n  let plots = [];\n\n  for (var f = 0; f < inputData.X[0].length; f++) {\n    let originalPoints = [];\n    let predictedPoints = [];\n    let max = inputData.norm_data.X[f].max;\n    let min = inputData.norm_data.X[f].min;\n\n    for (var i = 0; i < inputData.X.length; i++) {\n      let y = (ymax - ymin) * inputData.y[i][0] + ymin;\n      let y_hat = (ymax - ymin) * preds[i][0] + ymin;\n      originalPoints.push({\n        x: (max - min) * inputData.X[i][f] + min,\n        y: y\n      });\n      predictedPoints.push({\n        x: (max - min) * xs[i][f] + min,\n        y: y_hat\n      });\n    }\n\n    let plot = await tfvis.render.scatterplot({\n      name: 'Model Predictions vs Original for ' + inputData.features[f]\n    }, {\n      values: [originalPoints, predictedPoints],\n      series: ['original', 'predicted']\n    }, {\n      xLabel: inputData.features[f],\n      yLabel: inputData.features[inputData.features.length - 1],\n      height: 300\n    });\n    plots.push(plot);\n  }\n\n  return plots;\n}\n\nasync function train_tf(model, data) {\n  document.getElementById(\"test\").disabled = true; // Load and plot the original input data that we are going to train on.\n\n  /*tfvis.render.scatterplot(\n    {name: 'Horsepower v MPG'},\n    {values},\n    {\n      xLabel: 'Horsepower',\n      yLabel: 'MPG',\n      height: 300\n    }\n  );*/\n\n  let table = document.getElementById(\"error-table\");\n  table.style.display = \"none\"; // Convert the data to a form we can use for training.\n\n  const tensorData = convertToTensor(data);\n  const inputs = tensorData.inputs,\n        labels = tensorData.labels; // Train the model\n\n  let res = await trainModel(model, inputs, labels, data.features);\n  console.log(res);\n  document.getElementById(\"test\").disabled = false;\n}\n\nasync function test_tf(model, data) {\n  console.log(\"test_tf\");\n  return testModel(model, data);\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.setModel = this.setModel.bind(this);\n    this.getModel = this.getModel.bind(this);\n    this.TrainModel = this.TrainModel.bind(this);\n    this.Test = this.Test.bind(this);\n    this.Train = this.Train.bind(this);\n    this.reader = new FileReader();\n  }\n\n  componentDidMount() {\n    document.title = \"Simply ML\";\n  } // Entry point for setup\n\n\n  setModel(model) {\n    this.model = model;\n  }\n\n  Build(in_size, out_size) {\n    if (!this.model) {\n      return;\n    }\n\n    this.tfmodel = tf.sequential();\n\n    for (var l = 1; l < this.model.layers.length; l++) {\n      let nodes = this.model.layers[l].n_nodes;\n\n      if (l === this.model.layers.length - 1) {\n        nodes = out_size;\n      }\n\n      let data = {\n        units: nodes,\n        activation: this.model.layers[l].activation\n      };\n\n      if (l === 1) {\n        data.inputShape = [in_size];\n      }\n\n      this.tfmodel.add(tf.layers.dense(data));\n    }\n  }\n\n  getModel() {\n    return this.model;\n  } // Entry point for Training\n\n\n  Train() {\n    let f = document.getElementById(\"train_f\").files[0];\n\n    if (f) {\n      this.reader.readAsText(f, \"ASCII\");\n      this.reader.onload = this.TrainModel;\n    }\n  }\n\n  async TrainModel(e) {\n    let data = cleanData(JSON.parse(e.target.result));\n    this.trainX = data.trainX;\n    this.trainy = data.trainy;\n    this.testX = data.testX;\n    this.testy = data.testy;\n    this.features = data.features;\n    this.norm_data = data.norm_data;\n    this.Build(this.trainX[0].length, this.trainy[0].length);\n    this.showVisor();\n    await train_tf(this.tfmodel, {\n      X: this.trainX,\n      y: this.trainy,\n      features: this.features\n    });\n  }\n\n  async Test() {\n    if (this.test_plots) {\n      /*  console.log(this.test_plots);\n        for(var p in this.test_plots) {\n          this.test_plots[p].close();\n        }*/\n    }\n\n    this.showVisor();\n    this.test_plots = await test_tf(this.tfmodel, {\n      X: this.testX,\n      y: this.testy,\n      features: this.features,\n      norm_data: this.norm_data\n    });\n  }\n\n  showVisor() {\n    tfvis.visor().open();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(Background, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }), React.createElement(\"link\", {\n      href: \"https://fonts.googleapis.com/css?family=Roboto&display=swap\",\n      rel: \"stylesheet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"main-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"Simply ML\"), React.createElement(Building, {\n      showVisor: this.showVisor,\n      test: this.Test,\n      train: this.Train,\n      getModel: this.getModel,\n      setModel: this.setModel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/rajatmittal/Documents/SimplyML/Simply-ML/panels/src/App.js"],"names":["React","Component","Building","Background","tf","tfvis","require","cleanData","data","features","X_in","X","y_in","y","norm_data","j","length","max","min","i","i2","push","j2","j3","train_X","train_y","test_X","test_y","split","i3","Math","random","trainX","trainy","testX","testy","convertToTensor","norm","tidy","inputs","labels","inputTensor","tensor2d","labelTensor","trainModel","model","compile","optimizer","train","adam","loss","losses","meanSquaredError","metrics","batchSize","epochs","parseInt","document","getElementById","value","isNaN","fit","shuffle","callbacks","show","fitCallbacks","name","height","testModel","inputData","xs","preds","predict","arraySync","table","style","display","ymax","ymin","ranges","ranges_counts","k","p","y_hat","error","abs","console","log","r","firstChild","removeChild","e","createElement","className","te","createTextNode","toFixed","appendChild","plots","f","originalPoints","predictedPoints","x","plot","render","scatterplot","values","series","xLabel","yLabel","train_tf","disabled","tensorData","res","test_tf","App","constructor","props","setModel","bind","getModel","TrainModel","Test","Train","reader","FileReader","componentDidMount","title","Build","in_size","out_size","tfmodel","sequential","l","layers","nodes","n_nodes","units","activation","inputShape","add","dense","files","readAsText","onload","JSON","parse","target","result","showVisor","test_plots","visor","open"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n//import Tabs from './components/Tabs';\nimport Building from './components/building/Building';\nimport Background from './components/background/Background';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\n//import background from './background.png';\nrequire('./App.css');\n\n/**\n * Get the car data reduced to just the variables we are interested\n * and cleaned of missing data.\n */\nfunction cleanData(data) {\n  const features = data.features;\n  const X_in = data.X;\n  const y_in = data.y;\n\n  let norm_data = {};\n  norm_data.X = [];\n\n  for(var j = 0; j < X_in[0].length; j++) {\n    let max = -10000000;\n    let min = 10000000;\n    for(var i = 0; i < X_in.length; i++) {\n      if(X_in[i][j] > max) {\n        max = X_in[i][j];\n      }\n      if(X_in[i][j] < min) {\n        min = X_in[i][j];\n      }\n    }\n    for(var i2 = 0; i2 < X_in.length; i2++) {\n      X_in[i2][j] = (X_in[i2][j] - min) / (max - min);\n    }\n    norm_data.X.push({ min: min, max: max });\n  }\n    \n  let max = -10000000;\n  let min = 10000000;\n  for(var j2 = 0; j2 < y_in.length; j2++) {\n    if(y_in[j2][0] > max) {\n      max = y_in[j2][0];\n    }\n    if(y_in[j2][0] < min) {\n      min = y_in[j2][0];\n    }\n  }\n  for(var j3 = 0; j3 < y_in.length; j3++) {\n   y_in[j3][0] = (y_in[j3][0] - min) / (max - min);\n  }\n  norm_data.y = { min: min, max: max };\n\n  let train_X = [];\n  let train_y = [];\n  let test_X = [];\n  let test_y = [];\n  let split = 0.8;\n\n  for(var i3 = 0; i3 < X_in.length; i3++) {\n    if(Math.random() < split) {\n      train_X.push(X_in[i3]);\n      train_y.push(y_in[i3]);\n    } else {\n      test_X.push(X_in[i3]);\n      test_y.push(y_in[i3]);\n    }\n  }\n  \n\n  return {trainX: train_X, trainy: train_y, testX: test_X, testy: test_y, features: features, norm_data: norm_data};\n}\n\n/**\n * Convert the input data to tensors that we can use for machine\n * learning. We will also do the important best practices of _shuffling_\n * the data and _normalizing_ the data\n * MPG on the y-axis.\n */\nfunction convertToTensor(data, norm) {\n  // Wrapping these calculations in a tidy will dispose any\n  // intermediate tensors.\n\n  return tf.tidy(() => {\n    // Step 1. Shuffle the data\n    //tf.util.shuffle(data);\n\n    // Step 2. Convert data to Tensor\n    const inputs = data.X;\n    const labels = data.y;\n\n    const inputTensor = tf.tensor2d(inputs, [inputs.length, inputs[0].length]);\n    const labelTensor = tf.tensor2d(labels, [labels.length, labels[0].length]);\n  \n    return {\n      inputs: inputTensor,\n      labels: labelTensor,\n    }\n  });\n}\n\nasync function trainModel(model, inputs, labels, features) {\n  // Prepare the model for training.\n  model.compile({\n    optimizer: tf.train.adam(),\n    loss: tf.losses.meanSquaredError,\n    metrics: ['mse', 'acc'],\n  });\n\n  const batchSize = 32;\n  const epochs = parseInt(document.getElementById(\"epochs\").value);\n\n  if(!isNaN(epochs) && epochs > 0) {\n    return await model.fit(inputs, labels, {\n      batchSize,\n      epochs,\n      shuffle: true,\n      callbacks: tfvis.show.fitCallbacks(\n        { name: 'Training Performance' },\n        ['loss'],\n        { height: 200 }\n      )\n    });\n  }\n}\n\nasync function testModel(model, inputData) {\n  const [xs, preds] = tf.tidy(() => {\n    const xs = tf.tensor2d(inputData.X, [inputData.X.length, inputData.X[0].length]);\n    const preds = model.predict(xs);\n\n    return [xs.arraySync(), preds.arraySync()];\n  });\n  \n  let table = document.getElementById(\"error-table\");\n  table.style.display = \"block\";\n\n  let ymax = inputData.norm_data.y.max;\n  let ymin = inputData.norm_data.y.min;\n \n  let ranges = [0.01, 0.05, 0.1, 0.2];\n  \n  let ranges_counts = []\n  for(var k in ranges) {\n    ranges_counts.push(0);\n  }\n  \n  for(var p = 0; p < inputData.X.length; p++) {\n    let y = ((ymax - ymin) * inputData.y[p][0] + ymin);\n    let y_hat = ((ymax - ymin) * preds[p][0] + ymin);\n    let error = Math.abs((y_hat - y) / y);\n    console.log(error);\n    \n    for(var r  = 0; r < ranges.length; r++) {\n      if(error < ranges[r]) {\n        ranges_counts[r] += 1.0/inputData.X.length;\n        break;\n      }\n    }\n  }\n\n  while (table.firstChild) {\n    table.removeChild(table.firstChild);\n  }\n\n  for(var j in ranges) {\n    var e = document.createElement(\"LI\");\n    e.className = \"error-table-li\";\n    var te = document.createTextNode(\"Less than \" + ((100 * ranges[j]).toFixed(0)) + \"%: \" + (100 * ranges_counts[j]).toFixed(1) + \"%\");\n    e.appendChild(te);\n    table.appendChild(e);\n  }\n\n  let plots = [];\n\n  for(var f = 0; f < inputData.X[0].length; f++) {\n    let originalPoints = [];\n    let predictedPoints = [];\n    let max = inputData.norm_data.X[f].max;\n    let min = inputData.norm_data.X[f].min;\n    for(var i = 0; i < inputData.X.length; i++) {\n      let y = ((ymax - ymin) * inputData.y[i][0] + ymin);\n      let y_hat = ((ymax - ymin) * preds[i][0] + ymin);\n      originalPoints.push({ x: ((max - min) * inputData.X[i][f] + min), y: y }); \n      predictedPoints.push({ x: ((max - min) * xs[i][f] + min), y: y_hat }); \n    }\n\n    let plot = await tfvis.render.scatterplot(\n      {name: 'Model Predictions vs Original for ' + inputData.features[f]},\n      {values: [originalPoints, predictedPoints], series: ['original', 'predicted']},\n      {\n        xLabel: inputData.features[f],\n        yLabel: inputData.features[inputData.features.length-1],\n        height: 300\n      }\n    );\n    plots.push(plot);\n  }\n\n  return plots;\n}\n\nasync function train_tf(model, data) {\n  document.getElementById(\"test\").disabled = true;\n  // Load and plot the original input data that we are going to train on.\n\n  /*tfvis.render.scatterplot(\n    {name: 'Horsepower v MPG'},\n    {values},\n    {\n      xLabel: 'Horsepower',\n      yLabel: 'MPG',\n      height: 300\n    }\n  );*/\n\n  let table = document.getElementById(\"error-table\");\n  table.style.display = \"none\";\n\n  // Convert the data to a form we can use for training.\n  const tensorData = convertToTensor(data);\n  const {inputs, labels} = tensorData;\n\n  // Train the model\n  let res = await trainModel(model, inputs, labels, data.features);\n  console.log(res);\n  document.getElementById(\"test\").disabled = false;\n}\n\nasync function test_tf(model, data) {\n  console.log(\"test_tf\");\n  return testModel(model, data);\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setModel = this.setModel.bind(this);\n    this.getModel = this.getModel.bind(this);\n    this.TrainModel = this.TrainModel.bind(this);\n    this.Test = this.Test.bind(this);\n    this.Train = this.Train.bind(this);\n    this.reader = new FileReader();\n  }\n\n  componentDidMount() {\n    document.title = \"Simply ML\";\n  }\n\n  // Entry point for setup\n  setModel(model) {\n    this.model = model;\n  }\n\n  Build(in_size, out_size) {\n    if(!this.model) {\n      return;\n    }\n    this.tfmodel = tf.sequential();\n    for(var l = 1; l < this.model.layers.length; l++) {\n      let nodes = this.model.layers[l].n_nodes;\n      if(l === this.model.layers.length-1) {\n        nodes = out_size;\n      }\n      let data = { units: nodes, activation: this.model.layers[l].activation };\n      if(l === 1) {\n        data.inputShape = [in_size];\n      }\n\n      this.tfmodel.add(tf.layers.dense(data));\n    }\n  }\n\n  getModel() {\n    return this.model;\n  }\n\n  // Entry point for Training\n  Train() {\n    let f = document.getElementById(\"train_f\").files[0];\n    if(f) {\n      this.reader.readAsText(f, \"ASCII\");\n      this.reader.onload = this.TrainModel;\n    }\n  }\n\n  async TrainModel(e) {\n    let data = cleanData(JSON.parse(e.target.result));\n\n    this.trainX = data.trainX;\n    this.trainy = data.trainy;\n    this.testX = data.testX;\n    this.testy = data.testy;\n    this.features = data.features;\n    this.norm_data = data.norm_data;\n\n    this.Build(this.trainX[0].length, this.trainy[0].length);\n    this.showVisor();\n    await train_tf(this.tfmodel, { X: this.trainX, y: this.trainy, features: this.features });\n  }\n\n  async Test() {\n    if(this.test_plots) {\n    /*  console.log(this.test_plots);\n      for(var p in this.test_plots) {\n        this.test_plots[p].close();\n      }*/\n    }\n    this.showVisor();\n    this.test_plots = await test_tf(this.tfmodel, { X: this.testX, y: this.testy, features: this.features, norm_data: this.norm_data });\n  }\n\n  showVisor() {\n    tfvis.visor().open();\n  }\n\n  render() {\n    return (\n      <div>\n        <Background />\n        <link href=\"https://fonts.googleapis.com/css?family=Roboto&display=swap\" rel=\"stylesheet\"></link>\n        <h1 className=\"main-title\">Simply ML</h1>\n        <Building showVisor={this.showVisor} test={this.Test} train={this.Train} getModel={this.getModel} setModel={this.setModel}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}