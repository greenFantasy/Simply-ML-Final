{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { keys, replaceAll, stringify, vals } from '../../util';\nimport { isSignalRef } from '../../vega.schema';\nimport { mergeLegendComponent } from './parse';\n\nfunction setLegendEncode(legend, part, vgProp, vgRef) {\n  legend.encode = legend.encode || {};\n  legend.encode[part] = legend.encode[part] || {};\n  legend.encode[part].update = legend.encode[part].update || {}; // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291\n\n  legend.encode[part].update[vgProp] = vgRef;\n}\n\nexport function assembleLegends(model) {\n  const legendComponentIndex = model.component.legends;\n  const legendByDomain = {};\n\n  for (const channel of keys(legendComponentIndex)) {\n    const scaleComponent = model.getScaleComponent(channel);\n    const domainHash = stringify(scaleComponent.get('domains'));\n\n    if (legendByDomain[domainHash]) {\n      for (const mergedLegendComponent of legendByDomain[domainHash]) {\n        const merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);\n\n        if (!merged) {\n          // If cannot merge, need to add this legend separately\n          legendByDomain[domainHash].push(legendComponentIndex[channel]);\n        }\n      }\n    } else {\n      legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];\n    }\n  }\n\n  return vals(legendByDomain).flat().map(legendCmpt => {\n    const _a = legendCmpt.combine(),\n          labelExpr = _a.labelExpr,\n          legend = __rest(_a, [\"labelExpr\"]);\n\n    if (legend.encode && legend.encode.symbols) {\n      const out = legend.encode.symbols.update;\n\n      if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke && !legend.stroke) {\n        // For non color channel's legend, we need to override symbol stroke config from Vega config if stroke channel is not used.\n        out.stroke = {\n          value: 'transparent'\n        };\n      }\n\n      if (legend.fill) {\n        // If top-level fill is defined, for non color channel's legend, we need remove fill.\n        delete out.fill;\n      }\n    }\n\n    if (labelExpr !== undefined) {\n      let expr = labelExpr;\n\n      if (legend.encode && legend.encode.labels && legend.encode.labels.update && isSignalRef(legend.encode.labels.update.text)) {\n        expr = replaceAll(labelExpr, 'datum.label', legend.encode.labels.update.text.signal);\n      }\n\n      setLegendEncode(legend, 'labels', 'text', {\n        signal: expr\n      });\n    }\n\n    return legend;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}