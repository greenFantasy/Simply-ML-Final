{"ast":null,"code":"import { extractTransformsFromEncoding } from './encoding';\nimport { SpecMapper } from './spec/map';\n\nclass TransformExtractMapper extends SpecMapper {\n  mapUnit(spec, {\n    config\n  }) {\n    if (spec.encoding) {\n      const oldEncoding = spec.encoding,\n            oldTransforms = spec.transform;\n\n      const _extractTransformsFro = extractTransformsFromEncoding(oldEncoding, config),\n            bins = _extractTransformsFro.bins,\n            timeUnits = _extractTransformsFro.timeUnits,\n            aggregate = _extractTransformsFro.aggregate,\n            groupby = _extractTransformsFro.groupby,\n            encoding = _extractTransformsFro.encoding;\n\n      const transform = [...(oldTransforms ? oldTransforms : []), ...bins, ...timeUnits, ...(!aggregate.length ? [] : [{\n        aggregate,\n        groupby\n      }])];\n      return Object.assign(Object.assign(Object.assign({}, spec), transform.length > 0 ? {\n        transform\n      } : {}), {\n        encoding\n      });\n    } else {\n      return spec;\n    }\n  }\n\n}\n\nconst extractor = new TransformExtractMapper();\n/**\n * Modifies spec extracting transformations from encoding and moving them to the transforms array\n */\n\nexport function extractTransforms(spec, config) {\n  return extractor.map(spec, {\n    config\n  });\n}","map":null,"metadata":{},"sourceType":"module"}