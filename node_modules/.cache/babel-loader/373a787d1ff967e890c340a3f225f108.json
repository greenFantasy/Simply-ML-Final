{"ast":null,"code":"import { isNumber } from 'vega-util';\nimport { getViewConfigDiscreteStep } from '../../config';\nimport { getFirstDefined } from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { getMarkConfig } from '../common';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport const tick = {\n  vgMark: 'rect',\n  encodeEntry: model => {\n    const config = model.config,\n          markDef = model.markDef,\n          width = model.width,\n          height = model.height;\n    const orient = markDef.orient;\n    const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\n    const vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n      align: 'ignore',\n      baseline: 'ignore',\n      color: 'include',\n      orient: 'ignore',\n      size: 'ignore'\n    })), mixins.pointPosition('x', model, ref.mid(width), {\n      vgChannel: 'xc'\n    })), mixins.pointPosition('y', model, ref.mid(height), {\n      vgChannel: 'yc'\n    })), mixins.nonPosition('size', model, {\n      defaultValue: defaultSize(model),\n      vgChannel: vgSizeChannel\n    })), {\n      [vgThicknessChannel]: {\n        value: getFirstDefined(markDef.thickness, config.tick.thickness)\n      }\n    });\n  }\n};\n\nfunction defaultSize(model) {\n  const config = model.config,\n        markDef = model.markDef;\n  const orient = markDef.orient;\n  const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\n  const scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');\n  const markPropOrConfig = getFirstDefined(markDef[vgSizeChannel], markDef.size, getMarkConfig('size', markDef, config, {\n    vgChannel: vgSizeChannel\n  }), config.tick.bandSize);\n\n  if (markPropOrConfig !== undefined) {\n    return markPropOrConfig;\n  } else {\n    const scaleRange = scale ? scale.get('range') : undefined;\n\n    if (scaleRange && isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n      return scaleRange.step * 3 / 4;\n    }\n\n    const defaultViewStep = getViewConfigDiscreteStep(config.view, vgSizeChannel);\n    return defaultViewStep * 3 / 4;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}