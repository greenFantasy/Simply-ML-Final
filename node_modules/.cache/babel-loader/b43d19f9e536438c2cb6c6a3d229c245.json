{"ast":null,"code":"import { duplicate } from '../../util';\nimport { expression } from '../predicate';\nimport { DataFlowNode } from './dataflow';\nimport { getDependentFields } from './expressions';\nexport class FilterNode extends DataFlowNode {\n  constructor(parent, model, filter) {\n    super(parent);\n    this.model = model;\n    this.filter = filter; // TODO: refactor this to not take a node and\n    // then add a static function makeFromOperand and make the constructor take only an expression\n\n    this.expr = expression(this.model, this.filter, this);\n    this._dependentFields = getDependentFields(this.expr);\n  }\n\n  clone() {\n    return new FilterNode(null, this.model, duplicate(this.filter));\n  }\n\n  dependentFields() {\n    return this._dependentFields;\n  }\n\n  producedFields() {\n    return new Set(); // filter does not produce any new fields\n  }\n\n  assemble() {\n    return {\n      type: 'filter',\n      expr: this.expr\n    };\n  }\n\n  hash() {\n    return \"Filter \".concat(this.expr);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}