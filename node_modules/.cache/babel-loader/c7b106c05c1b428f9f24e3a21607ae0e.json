{"ast":null,"code":"import * as log from '../log';\nimport { keys } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { makeCompositeAggregatePartFactory } from './common';\nimport { errorBarParams } from './errorbar';\nexport const ERRORBAND = 'errorband';\nconst ERRORBAND_PART_INDEX = {\n  band: 1,\n  borders: 1\n};\nexport const ERRORBAND_PARTS = keys(ERRORBAND_PART_INDEX);\nexport const errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);\nexport function normalizeErrorBand(spec, {\n  config\n}) {\n  const _errorBarParams = errorBarParams(spec, ERRORBAND, config),\n        transform = _errorBarParams.transform,\n        continuousAxisChannelDef = _errorBarParams.continuousAxisChannelDef,\n        continuousAxis = _errorBarParams.continuousAxis,\n        encodingWithoutContinuousAxis = _errorBarParams.encodingWithoutContinuousAxis,\n        markDef = _errorBarParams.markDef,\n        outerSpec = _errorBarParams.outerSpec,\n        tooltipEncoding = _errorBarParams.tooltipEncoding;\n\n  const errorBandDef = markDef;\n  const makeErrorBandPart = makeCompositeAggregatePartFactory(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);\n  const is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;\n  let bandMark = {\n    type: is2D ? 'area' : 'rect'\n  };\n  let bordersMark = {\n    type: is2D ? 'line' : 'rule'\n  };\n  const interpolate = Object.assign(Object.assign({}, errorBandDef.interpolate ? {\n    interpolate: errorBandDef.interpolate\n  } : {}), errorBandDef.tension && errorBandDef.interpolate ? {\n    interpolate: errorBandDef.tension\n  } : {});\n\n  if (is2D) {\n    bandMark = Object.assign(Object.assign({}, bandMark), interpolate);\n    bordersMark = Object.assign(Object.assign({}, bordersMark), interpolate);\n  } else if (errorBandDef.interpolate) {\n    log.warn(log.message.errorBand1DNotSupport('interpolate'));\n  } else if (errorBandDef.tension) {\n    log.warn(log.message.errorBand1DNotSupport('tension'));\n  }\n\n  return Object.assign(Object.assign({}, outerSpec), {\n    transform,\n    layer: [...makeErrorBandPart({\n      partName: 'band',\n      mark: bandMark,\n      positionPrefix: 'lower',\n      endPositionPrefix: 'upper',\n      extraEncoding: tooltipEncoding\n    }), ...makeErrorBandPart({\n      partName: 'borders',\n      mark: bordersMark,\n      positionPrefix: 'lower',\n      extraEncoding: tooltipEncoding\n    }), ...makeErrorBandPart({\n      partName: 'borders',\n      mark: bordersMark,\n      positionPrefix: 'upper',\n      extraEncoding: tooltipEncoding\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}