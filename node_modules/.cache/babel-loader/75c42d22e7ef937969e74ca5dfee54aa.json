{"ast":null,"code":"import { keys } from '../util';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { Model } from './model';\nexport class BaseConcatModel extends Model {\n  constructor(spec, specType, parent, parentGivenName, config, repeater, resolve) {\n    super(spec, specType, parent, parentGivenName, config, repeater, resolve);\n  }\n\n  parseData() {\n    this.component.data = parseData(this);\n    this.children.forEach(child => {\n      child.parseData();\n    });\n  }\n\n  parseSelections() {\n    // Merge selections up the hierarchy so that they may be referenced\n    // across unit specs. Persist their definitions within each child\n    // to assemble signals which remain within output Vega unit groups.\n    this.component.selection = {};\n\n    for (const child of this.children) {\n      child.parseSelections();\n      keys(child.component.selection).forEach(key => {\n        this.component.selection[key] = child.component.selection[key];\n      });\n    }\n  }\n\n  parseMarkGroup() {\n    for (const child of this.children) {\n      child.parseMarkGroup();\n    }\n  }\n\n  parseAxesAndHeaders() {\n    for (const child of this.children) {\n      child.parseAxesAndHeaders();\n    } // TODO(#2415): support shared axes\n\n  }\n\n  assembleSelectionTopLevelSignals(signals) {\n    return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n  }\n\n  assembleSignals() {\n    this.children.forEach(child => child.assembleSignals());\n    return [];\n  }\n\n  assembleLayoutSignals() {\n    return this.children.reduce((signals, child) => {\n      return [...signals, ...child.assembleLayoutSignals()];\n    }, assembleLayoutSignals(this));\n  }\n\n  assembleSelectionData(data) {\n    return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n  }\n\n  assembleMarks() {\n    // only children have marks\n    return this.children.map(child => {\n      const title = child.assembleTitle();\n      const style = child.assembleGroupStyle();\n      const encodeEntry = child.assembleGroupEncodeEntry(false);\n      return Object.assign(Object.assign(Object.assign(Object.assign({\n        type: 'group',\n        name: child.getName('group')\n      }, title ? {\n        title\n      } : {}), style ? {\n        style\n      } : {}), encodeEntry ? {\n        encode: {\n          update: encodeEntry\n        }\n      } : {}), child.assembleGroup());\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}