{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { getSizeType, POSITION_SCALE_CHANNELS } from '../channel';\nimport { isFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isUnitSpec } from '../spec/unit';\nimport { keys } from '../util';\nexport class RangeStepNormalizer {\n  constructor() {\n    this.name = 'RangeStep';\n  }\n\n  hasMatchingType(spec) {\n    if (isUnitSpec(spec) && spec.encoding) {\n      for (const channel of POSITION_SCALE_CHANNELS) {\n        const def = spec.encoding[channel];\n\n        if (def && isFieldDef(def)) {\n          if (def && def.scale && def.scale['rangeStep']) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  run(spec) {\n    const sizeMixins = {};\n    let encoding = Object.assign({}, spec.encoding);\n\n    for (const channel of POSITION_SCALE_CHANNELS) {\n      const sizeType = getSizeType(channel);\n      const def = encoding[channel];\n\n      if (def && isFieldDef(def)) {\n        if (def && def.scale && def.scale['rangeStep']) {\n          const scale = def.scale,\n                defWithoutScale = __rest(def, [\"scale\"]);\n\n          const _a = scale,\n                rangeStep = _a.rangeStep,\n                scaleWithoutRangeStep = __rest(_a, [\"rangeStep\"]);\n\n          sizeMixins[sizeType] = {\n            step: scale['rangeStep']\n          };\n          log.warn(log.message.RANGE_STEP_DEPRECATED);\n          encoding = Object.assign(Object.assign({}, encoding), {\n            [channel]: Object.assign(Object.assign({}, defWithoutScale), keys(scaleWithoutRangeStep).length ? {\n              scale: scaleWithoutRangeStep\n            } : {})\n          });\n        }\n      }\n    }\n\n    return Object.assign(Object.assign(Object.assign({}, sizeMixins), spec), {\n      encoding\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}