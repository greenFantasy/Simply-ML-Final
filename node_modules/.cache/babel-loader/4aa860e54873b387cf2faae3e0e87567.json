{"ast":null,"code":"import { uniqueId } from '../../util';\n/**\n * A node in the dataflow tree.\n */\n\nexport class DataFlowNode {\n  constructor(parent, debugName) {\n    this.debugName = debugName;\n    this._children = [];\n    this._parent = null;\n\n    if (parent) {\n      this.parent = parent;\n    }\n  }\n  /**\n   * Clone this node with a deep copy but don't clone links to children or parents.\n   */\n\n\n  clone() {\n    throw new Error('Cannot clone node');\n  }\n\n  get parent() {\n    return this._parent;\n  }\n  /**\n   * Set the parent of the node and also add this node to the parent's children.\n   */\n\n\n  set parent(parent) {\n    this._parent = parent;\n\n    if (parent) {\n      parent.addChild(this);\n    }\n  }\n\n  get children() {\n    return this._children;\n  }\n\n  numChildren() {\n    return this._children.length;\n  }\n\n  addChild(child, loc) {\n    // do not add the same child twice\n    if (this._children.indexOf(child) > -1) {\n      console.warn('Attempt to add the same child twice.');\n      return;\n    }\n\n    if (loc !== undefined) {\n      this._children.splice(loc, 0, child);\n    } else {\n      this._children.push(child);\n    }\n  }\n\n  removeChild(oldChild) {\n    const loc = this._children.indexOf(oldChild);\n\n    this._children.splice(loc, 1);\n\n    return loc;\n  }\n  /**\n   * Remove node from the dataflow.\n   */\n\n\n  remove() {\n    let loc = this._parent.removeChild(this);\n\n    for (const child of this._children) {\n      // do not use the set method because we want to insert at a particular location\n      child._parent = this._parent;\n\n      this._parent.addChild(child, loc++);\n    }\n  }\n  /**\n   * Insert another node as a parent of this node.\n   */\n\n\n  insertAsParentOf(other) {\n    const parent = other.parent;\n    parent.removeChild(this);\n    this.parent = parent;\n    other.parent = this;\n  }\n\n  swapWithParent() {\n    const parent = this._parent;\n    const newParent = parent.parent; // reconnect the children\n\n    for (const child of this._children) {\n      child.parent = parent;\n    } // remove old links\n\n\n    this._children = []; // equivalent to removing every child link one by one\n\n    parent.removeChild(this);\n    parent.parent.removeChild(parent); // swap two nodes\n\n    this.parent = newParent;\n    parent.parent = this;\n  }\n\n}\nexport class OutputNode extends DataFlowNode {\n  /**\n   * @param source The name of the source. Will change in assemble.\n   * @param type The type of the output node.\n   * @param refCounts A global ref counter map.\n   */\n  constructor(parent, source, type, refCounts) {\n    super(parent, source);\n    this.type = type;\n    this.refCounts = refCounts;\n    this._source = this._name = source;\n\n    if (this.refCounts && !(this._name in this.refCounts)) {\n      this.refCounts[this._name] = 0;\n    }\n  }\n\n  clone() {\n    const cloneObj = new this.constructor();\n    cloneObj.debugName = 'clone_' + this.debugName;\n    cloneObj._source = this._source;\n    cloneObj._name = 'clone_' + this._name;\n    cloneObj.type = this.type;\n    cloneObj.refCounts = this.refCounts;\n    cloneObj.refCounts[cloneObj._name] = 0;\n    return cloneObj;\n  }\n\n  dependentFields() {\n    return new Set();\n  }\n\n  producedFields() {\n    return new Set();\n  }\n\n  hash() {\n    if (this._hash === undefined) {\n      this._hash = \"Output \".concat(uniqueId());\n    }\n\n    return this._hash;\n  }\n  /**\n   * Request the datasource name and increase the ref counter.\n   *\n   * During the parsing phase, this will return the simple name such as 'main' or 'raw'.\n   * It is crucial to request the name from an output node to mark it as a required node.\n   * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.\n   *\n   * In the assemble phase, this will return the correct name.\n   */\n\n\n  getSource() {\n    this.refCounts[this._name]++;\n    return this._source;\n  }\n\n  isRequired() {\n    return !!this.refCounts[this._name];\n  }\n\n  setSource(source) {\n    this._source = source;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}