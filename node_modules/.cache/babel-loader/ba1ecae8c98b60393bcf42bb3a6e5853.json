{"ast":null,"code":"import { isGenerator, isInlineData, isNamedData, isSphereGenerator, isUrlData } from '../../data';\nimport { contains, keys, omit } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class SourceNode extends DataFlowNode {\n  constructor(data) {\n    super(null); // source cannot have parent\n\n    data = data || {\n      name: 'source'\n    };\n    let format;\n\n    if (!isGenerator(data)) {\n      format = data.format ? Object.assign({}, omit(data.format, ['parse'])) : {};\n    }\n\n    if (isInlineData(data)) {\n      this._data = {\n        values: data.values\n      };\n    } else if (isUrlData(data)) {\n      this._data = {\n        url: data.url\n      };\n\n      if (!format.type) {\n        // Extract extension from URL using snippet from\n        // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript\n        let defaultExtension = /(?:\\.([^.]+))?$/.exec(data.url)[1];\n\n        if (!contains(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {\n          defaultExtension = 'json';\n        } // defaultExtension has type string but we ensure that it is DataFormatType above\n\n\n        format.type = defaultExtension;\n      }\n    } else if (isSphereGenerator(data)) {\n      // hardwire GeoJSON sphere data into output specification\n      this._data = {\n        values: [{\n          type: 'Sphere'\n        }]\n      };\n    } else if (isNamedData(data) || isGenerator(data)) {\n      this._data = {};\n    } // set flag to check if generator\n\n\n    this._generator = isGenerator(data); // any dataset can be named\n\n    if (data.name) {\n      this._name = data.name;\n    }\n\n    if (format && keys(format).length > 0) {\n      this._data.format = format;\n    }\n  }\n\n  dependentFields() {\n    return new Set();\n  }\n\n  producedFields() {\n    return undefined; // we don't know what this source produces\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  hasName() {\n    return !!this._name;\n  }\n\n  get isGenerator() {\n    return this._generator;\n  }\n\n  get dataName() {\n    return this._name;\n  }\n\n  set dataName(name) {\n    this._name = name;\n  }\n\n  set parent(parent) {\n    throw new Error('Source nodes have to be roots.');\n  }\n\n  remove() {\n    throw new Error('Source nodes are roots and cannot be removed.');\n  }\n\n  hash() {\n    throw new Error('Cannot hash sources');\n  }\n\n  assemble() {\n    return Object.assign(Object.assign({\n      name: this._name\n    }, this._data), {\n      transform: []\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}