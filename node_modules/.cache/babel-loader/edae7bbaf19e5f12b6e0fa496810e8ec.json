{"ast":null,"code":"import { isArray, isNumber, isObject } from 'vega-util';\nimport { keys } from '../util';\nimport { isConcatSpec } from './concat';\nimport { isFacetMapping, isFacetSpec } from './facet';\nimport { isRepeatSpec } from './repeat';\nexport function isStep(size) {\n  return isObject(size) && size['step'] !== undefined;\n}\nexport const DEFAULT_SPACING = 20;\nconst COMPOSITION_LAYOUT_INDEX = {\n  align: 1,\n  bounds: 1,\n  center: 1,\n  columns: 1,\n  spacing: 1\n};\nconst COMPOSITION_LAYOUT_PROPERTIES = keys(COMPOSITION_LAYOUT_INDEX);\nexport function extractCompositionLayout(spec, specType, config) {\n  const compositionConfig = config[specType];\n  const layout = {}; // Apply config first\n\n  const spacingConfig = compositionConfig.spacing,\n        columns = compositionConfig.columns;\n\n  if (spacingConfig !== undefined) {\n    layout.spacing = spacingConfig;\n  }\n\n  if (columns !== undefined) {\n    if (isFacetSpec(spec) && !isFacetMapping(spec.facet) || isRepeatSpec(spec) && isArray(spec.repeat) || isConcatSpec(spec)) {\n      layout.columns = columns;\n    }\n  } // Then copy properties from the spec\n\n\n  for (const prop of COMPOSITION_LAYOUT_PROPERTIES) {\n    if (spec[prop] !== undefined) {\n      if (prop === 'spacing') {\n        const spacing = spec[prop];\n        layout[prop] = isNumber(spacing) ? spacing : {\n          row: spacing.row || spacingConfig,\n          column: spacing.column || spacingConfig\n        };\n      } else {\n        layout[prop] = spec[prop];\n      }\n    }\n  }\n\n  return layout;\n}","map":null,"metadata":{},"sourceType":"module"}