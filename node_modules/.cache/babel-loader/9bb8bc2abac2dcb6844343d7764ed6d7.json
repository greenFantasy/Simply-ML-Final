{"ast":null,"code":"import { isNumber, isString } from 'vega-util';\nimport { isMinMaxOp } from '../../aggregate';\nimport { getMainRangeChannel } from '../../channel';\nimport { isFieldDef, isScaleFieldDef, isTimeFormatFieldDef, isTypedFieldDef } from '../../channeldef';\nimport { isGenerator } from '../../data';\nimport { isDateTime } from '../../datetime';\nimport * as log from '../../log';\nimport { forEachLeaf } from '../../logical';\nimport { isPathMark } from '../../mark';\nimport { isFieldEqualPredicate, isFieldOneOfPredicate, isFieldPredicate, isFieldRangePredicate } from '../../predicate';\nimport { isSortField } from '../../sort';\nimport { accessPathDepth, accessPathWithDatum, duplicate, hash, keys, removePathFromField } from '../../util';\nimport { isFacetModel, isUnitModel } from '../model';\nimport { Split } from '../split';\nimport { DataFlowNode } from './dataflow';\n/**\n * Remove quotes from a string.\n */\n\nfunction unquote(pattern) {\n  if (pattern[0] === \"'\" && pattern[pattern.length - 1] === \"'\" || pattern[0] === '\"' && pattern[pattern.length - 1] === '\"') {\n    return pattern.slice(1, -1);\n  }\n\n  return pattern;\n}\n/**\n * @param field The field.\n * @param parse What to parse the field as.\n */\n\n\nfunction parseExpression(field, parse) {\n  const f = accessPathWithDatum(field);\n\n  if (parse === 'number') {\n    return \"toNumber(\".concat(f, \")\");\n  } else if (parse === 'boolean') {\n    return \"toBoolean(\".concat(f, \")\");\n  } else if (parse === 'string') {\n    return \"toString(\".concat(f, \")\");\n  } else if (parse === 'date') {\n    return \"toDate(\".concat(f, \")\");\n  } else if (parse === 'flatten') {\n    return f;\n  } else if (parse.indexOf('date:') === 0) {\n    const specifier = unquote(parse.slice(5, parse.length));\n    return \"timeParse(\".concat(f, \",'\").concat(specifier, \"')\");\n  } else if (parse.indexOf('utc:') === 0) {\n    const specifier = unquote(parse.slice(4, parse.length));\n    return \"utcParse(\".concat(f, \",'\").concat(specifier, \"')\");\n  } else {\n    log.warn(log.message.unrecognizedParse(parse));\n    return null;\n  }\n}\n\nexport function getImplicitFromFilterTransform(transform) {\n  const implicit = {};\n  forEachLeaf(transform.filter, filter => {\n    if (isFieldPredicate(filter)) {\n      // Automatically add a parse node for filters with filter objects\n      let val = null; // For EqualFilter, just use the equal property.\n      // For RangeFilter and OneOfFilter, all array members should have\n      // the same type, so we only use the first one.\n\n      if (isFieldEqualPredicate(filter)) {\n        val = filter.equal;\n      } else if (isFieldRangePredicate(filter)) {\n        val = filter.range[0];\n      } else if (isFieldOneOfPredicate(filter)) {\n        val = (filter.oneOf || filter['in'])[0];\n      } // else -- for filter expression, we can't infer anything\n\n\n      if (val) {\n        if (isDateTime(val)) {\n          implicit[filter.field] = 'date';\n        } else if (isNumber(val)) {\n          implicit[filter.field] = 'number';\n        } else if (isString(val)) {\n          implicit[filter.field] = 'string';\n        }\n      }\n\n      if (filter.timeUnit) {\n        implicit[filter.field] = 'date';\n      }\n    }\n  });\n  return implicit;\n}\n/**\n * Creates a parse node for implicit parsing from a model and updates ancestorParse.\n */\n\nexport function getImplicitFromEncoding(model) {\n  const implicit = {};\n\n  function add(fieldDef) {\n    if (isTimeFormatFieldDef(fieldDef)) {\n      implicit[fieldDef.field] = 'date';\n    } else if (fieldDef.type === 'quantitative' && isMinMaxOp(fieldDef.aggregate) // we need to parse numbers to support correct min and max\n    ) {\n        implicit[fieldDef.field] = 'number';\n      } else if (accessPathDepth(fieldDef.field) > 1) {\n      // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.\n      // (Parsing numbers / dates already flattens numeric and temporal fields.)\n      if (!(fieldDef.field in implicit)) {\n        implicit[fieldDef.field] = 'flatten';\n      }\n    } else if (isScaleFieldDef(fieldDef) && isSortField(fieldDef.sort) && accessPathDepth(fieldDef.sort.field) > 1) {\n      // Flatten fields that we sort by but that are not otherwise flattened.\n      if (!(fieldDef.sort.field in implicit)) {\n        implicit[fieldDef.sort.field] = 'flatten';\n      }\n    }\n  }\n\n  if (isUnitModel(model) || isFacetModel(model)) {\n    // Parse encoded fields\n    model.forEachFieldDef((fieldDef, channel) => {\n      if (isTypedFieldDef(fieldDef)) {\n        add(fieldDef);\n      } else {\n        const mainChannel = getMainRangeChannel(channel);\n        const mainFieldDef = model.fieldDef(mainChannel);\n        add(Object.assign(Object.assign({}, fieldDef), {\n          type: mainFieldDef.type\n        }));\n      }\n    });\n  } // Parse quantitative dimension fields of path marks as numbers so that we sort them correctly.\n\n\n  if (isUnitModel(model)) {\n    const mark = model.mark,\n          markDef = model.markDef,\n          encoding = model.encoding;\n\n    if (isPathMark(mark) && // No need to sort by dimension if we have a connected scatterplot (order channel is present)\n    !model.encoding.order) {\n      const dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';\n      const dimensionChannelDef = encoding[dimensionChannel];\n\n      if (isFieldDef(dimensionChannelDef) && dimensionChannelDef.type === 'quantitative' && !(dimensionChannelDef.field in implicit)) {\n        implicit[dimensionChannelDef.field] = 'number';\n      }\n    }\n  }\n\n  return implicit;\n}\n/**\n * Creates a parse node for implicit parsing from a model and updates ancestorParse.\n */\n\nexport function getImplicitFromSelection(model) {\n  const implicit = {};\n\n  if (isUnitModel(model) && model.component.selection) {\n    for (const name of keys(model.component.selection)) {\n      const selCmpt = model.component.selection[name];\n\n      for (const proj of selCmpt.project.items) {\n        if (!proj.channel && accessPathDepth(proj.field) > 1) {\n          implicit[proj.field] = 'flatten';\n        }\n      }\n    }\n  }\n\n  return implicit;\n}\nexport class ParseNode extends DataFlowNode {\n  constructor(parent, parse) {\n    super(parent);\n    this._parse = parse;\n  }\n\n  clone() {\n    return new ParseNode(null, duplicate(this._parse));\n  }\n\n  hash() {\n    return \"Parse \".concat(hash(this._parse));\n  }\n  /**\n   * Creates a parse node from a data.format.parse and updates ancestorParse.\n   */\n\n\n  static makeExplicit(parent, model, ancestorParse) {\n    // Custom parse\n    let explicit = {};\n    const data = model.data;\n\n    if (!isGenerator(data) && data && data.format && data.format.parse) {\n      explicit = data.format.parse;\n    }\n\n    return this.makeWithAncestors(parent, explicit, {}, ancestorParse);\n  }\n  /**\n   * Creates a parse node from \"explicit\" parse and \"implicit\" parse and updates ancestorParse.\n   */\n\n\n  static makeWithAncestors(parent, explicit, implicit, ancestorParse) {\n    // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as \"derived\"). We also don't need to flatten a field that has already been parsed.\n    for (const field of keys(implicit)) {\n      const parsedAs = ancestorParse.getWithExplicit(field);\n\n      if (parsedAs.value !== undefined) {\n        // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.\n        if (parsedAs.explicit || parsedAs.value === implicit[field] || parsedAs.value === 'derived' || implicit[field] === 'flatten') {\n          delete implicit[field];\n        } else {\n          log.warn(log.message.differentParse(field, implicit[field], parsedAs.value));\n        }\n      }\n    }\n\n    for (const field of keys(explicit)) {\n      const parsedAs = ancestorParse.get(field);\n\n      if (parsedAs !== undefined) {\n        // Don't parse a field again if it has been parsed with the same type already.\n        if (parsedAs === explicit[field]) {\n          delete explicit[field];\n        } else {\n          log.warn(log.message.differentParse(field, explicit[field], parsedAs));\n        }\n      }\n    }\n\n    const parse = new Split(explicit, implicit); // add the format parse from this model so that children don't parse the same field again\n\n    ancestorParse.copyAll(parse); // copy only non-null parses\n\n    const p = {};\n\n    for (const key of keys(parse.combine())) {\n      const val = parse.get(key);\n\n      if (val !== null) {\n        p[key] = val;\n      }\n    }\n\n    if (keys(p).length === 0 || ancestorParse.parseNothing) {\n      return null;\n    }\n\n    return new ParseNode(parent, p);\n  }\n\n  get parse() {\n    return this._parse;\n  }\n\n  merge(other) {\n    this._parse = Object.assign(Object.assign({}, this._parse), other.parse);\n    other.remove();\n  }\n  /**\n   * Assemble an object for Vega's format.parse property.\n   */\n\n\n  assembleFormatParse() {\n    const formatParse = {};\n\n    for (const field of keys(this._parse)) {\n      const p = this._parse[field];\n\n      if (accessPathDepth(field) === 1) {\n        formatParse[field] = p;\n      }\n    }\n\n    return formatParse;\n  } // format parse depends and produces all fields in its parse\n\n\n  producedFields() {\n    return new Set(keys(this._parse));\n  }\n\n  dependentFields() {\n    return new Set(keys(this._parse));\n  }\n\n  assembleTransforms(onlyNested = false) {\n    return keys(this._parse).filter(field => onlyNested ? accessPathDepth(field) > 1 : true).map(field => {\n      const expr = parseExpression(field, this._parse[field]);\n\n      if (!expr) {\n        return null;\n      }\n\n      const formula = {\n        type: 'formula',\n        expr,\n        as: removePathFromField(field) // Vega output is always flattened\n\n      };\n      return formula;\n    }).filter(t => t !== null);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}