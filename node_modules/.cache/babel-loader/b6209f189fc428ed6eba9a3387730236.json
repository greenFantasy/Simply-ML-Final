{"ast":null,"code":"import { isBinned } from '../bin';\nimport { getMainRangeChannel, SECONDARY_RANGE_CHANNEL } from '../channel';\nimport { isFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isUnitSpec } from '../spec/unit';\nexport class RuleForRangedLineNormalizer {\n  constructor() {\n    this.name = 'RuleForRangedLine';\n  }\n\n  hasMatchingType(spec) {\n    if (isUnitSpec(spec)) {\n      const encoding = spec.encoding,\n            mark = spec.mark;\n\n      if (mark === 'line') {\n        for (const channel of SECONDARY_RANGE_CHANNEL) {\n          const mainChannel = getMainRangeChannel(channel);\n          const mainChannelDef = encoding[mainChannel];\n\n          if (!!encoding[channel] && isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  run(spec, params, normalize) {\n    const encoding = spec.encoding;\n    log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n    return normalize(Object.assign(Object.assign({}, spec), {\n      mark: 'rule'\n    }), params);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}