{"ast":null,"code":"import _slicedToArray from \"/Users/rajatmittal/Documents/SimplyML/Simply-ML/panels/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport 'array-flat-polyfill';\nimport { default as clone_ } from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { hasOwnProperty, isArray, isNumber, isString, splitAccessPath, stringValue } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\nexport const deepEqual = deepEqual_;\nexport const duplicate = clone_;\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // â†’ {'a': 1, 'c': 3}\n */\n\nexport function pick(obj, props) {\n  const copy = {};\n\n  for (const prop of props) {\n    if (hasOwnProperty(obj, prop)) {\n      copy[prop] = obj[prop];\n    }\n  }\n\n  return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\n\nexport function omit(obj, props) {\n  const copy = Object.assign({}, obj);\n\n  for (const prop of props) {\n    delete copy[prop];\n  }\n\n  return copy;\n}\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\n\nSet.prototype['toJSON'] = function () {\n  return \"Set(\".concat([...this].map(x => stableStringify(x)).join(','), \")\");\n};\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\n\n\nexport const stringify = stableStringify;\n/**\n * Converts any object to a string of limited size, or a number.\n */\n\nexport function hash(a) {\n  if (isNumber(a)) {\n    return a;\n  }\n\n  const str = isString(a) ? a : stableStringify(a); // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n\n  if (str.length < 250) {\n    return str;\n  } // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n\n\n  let h = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    h = (h << 5) - h + char;\n    h = h & h; // Convert to 32bit integer\n  }\n\n  return h;\n}\nexport function isNullOrFalse(x) {\n  return x === false || x === null;\n}\nexport function contains(array, item) {\n  return array.indexOf(item) > -1;\n}\n/** Returns the array without the elements in item */\n\nexport function without(array, excludedItems) {\n  return array.filter(item => !contains(excludedItems, item));\n}\nexport function union(array, other) {\n  return array.concat(without(other, array));\n}\n/**\n * Returns true if any item returns true.\n */\n\nexport function some(arr, f) {\n  let i = 0;\n\n  for (const _ref of arr.entries()) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    const k = _ref2[0];\n    const a = _ref2[1];\n\n    if (f(a, k, i++)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Returns true if all items return true.\n */\n\nexport function every(arr, f) {\n  let i = 0;\n\n  for (const _ref3 of arr.entries()) {\n    var _ref4 = _slicedToArray(_ref3, 2);\n\n    const k = _ref4[0];\n    const a = _ref4[1];\n\n    if (!f(a, k, i++)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * recursively merges src into dest\n */\n\nexport function mergeDeep(dest, ...src) {\n  for (const s of src) {\n    dest = deepMerge_(dest, s);\n  }\n\n  return dest;\n} // recursively merges src into dest\n\nfunction deepMerge_(dest, src) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (const p in src) {\n    if (!hasOwnProperty(src, p)) {\n      continue;\n    }\n\n    if (src[p] === undefined) {\n      continue;\n    }\n\n    if (typeof src[p] !== 'object' || isArray(src[p]) || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = mergeDeep(isArray(src[p].constructor) ? [] : {}, src[p]);\n    } else {\n      mergeDeep(dest[p], src[p]);\n    }\n  }\n\n  return dest;\n}\n\nexport function unique(values, f) {\n  const results = [];\n  const u = {};\n  let v;\n\n  for (const val of values) {\n    v = f(val);\n\n    if (v in u) {\n      continue;\n    }\n\n    u[v] = 1;\n    results.push(val);\n  }\n\n  return results;\n}\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\n\nexport function isEqual(dict, other) {\n  const dictKeys = keys(dict);\n  const otherKeys = keys(other);\n\n  if (dictKeys.length !== otherKeys.length) {\n    return false;\n  }\n\n  for (const key of dictKeys) {\n    if (dict[key] !== other[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function setEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (const e of a) {\n    if (!b.has(e)) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function hasIntersection(a, b) {\n  for (const key of a) {\n    if (b.has(key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function prefixGenerator(a) {\n  const prefixes = new Set();\n\n  for (const x of a) {\n    const splitField = splitAccessPath(x); // Wrap every element other than the first in `[]`\n\n    const wrappedWithAccessors = splitField.map((y, i) => i === 0 ? y : \"[\".concat(y, \"]\"));\n    const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n    computedPrefixes.forEach(y => prefixes.add(y));\n  }\n\n  return prefixes;\n}\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\n\nexport function fieldIntersection(a, b) {\n  if (a === undefined || b === undefined) {\n    return true;\n  }\n\n  return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n} // This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\n\nexport const keys = Object.keys;\nexport function vals(x) {\n  const _vals = [];\n\n  for (const k in x) {\n    if (hasOwnProperty(x, k)) {\n      _vals.push(x[k]);\n    }\n  }\n\n  return _vals;\n}\nexport function entries(x) {\n  const _entries = [];\n\n  for (const k in x) {\n    if (hasOwnProperty(x, k)) {\n      _entries.push({\n        key: k,\n        value: x[k]\n      });\n    }\n  }\n\n  return _entries;\n}\nexport function isBoolean(b) {\n  return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\n\nexport function varName(s) {\n  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n  const alphanumericS = s.replace(/\\W/g, '_'); // Add _ if the string has leading numbers.\n\n  return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n  if (isLogicalNot(op)) {\n    return '!(' + logicalExpr(op.not, cb) + ')';\n  } else if (isLogicalAnd(op)) {\n    return '(' + op.and.map(and => logicalExpr(and, cb)).join(') && (') + ')';\n  } else if (isLogicalOr(op)) {\n    return '(' + op.or.map(or => logicalExpr(or, cb)).join(') || (') + ')';\n  } else {\n    return cb(op);\n  }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\n\nexport function deleteNestedProperty(obj, orderedProps) {\n  if (orderedProps.length === 0) {\n    return true;\n  }\n\n  const prop = orderedProps.shift();\n\n  if (deleteNestedProperty(obj[prop], orderedProps)) {\n    delete obj[prop];\n  }\n\n  return keys(obj).length === 0;\n}\nexport function titlecase(s) {\n  return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\n\nexport function accessPathWithDatum(path, datum = 'datum') {\n  const pieces = splitAccessPath(path);\n  const prefixes = [];\n\n  for (let i = 1; i <= pieces.length; i++) {\n    const prefix = \"[\".concat(pieces.slice(0, i).map(stringValue).join(']['), \"]\");\n    prefixes.push(\"\".concat(datum).concat(prefix));\n  }\n\n  return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\n\nexport function flatAccessWithDatum(path, datum = 'datum') {\n  return \"\".concat(datum, \"[\").concat(stringValue(splitAccessPath(path).join('.')), \"]\");\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\n\nexport function replacePathInField(path) {\n  return \"\".concat(splitAccessPath(path).map(p => replaceAll(p, '.', '\\\\.')).join('\\\\.'));\n}\n/**\n * Replace all ocurrences of a string with another string.\n *\n * @param string the string to replace in\n * @param find the string to replace\n * @param replacement the replacement\n */\n\nexport function replaceAll(string, find, replacement) {\n  return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\n\nexport function removePathFromField(path) {\n  return \"\".concat(splitAccessPath(path).join('.'));\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\n\nexport function accessPathDepth(path) {\n  if (!path) {\n    return 0;\n  }\n\n  return splitAccessPath(path).length;\n}\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\n\nexport function getFirstDefined(...args) {\n  for (const arg of args) {\n    if (arg !== undefined) {\n      return arg;\n    }\n  }\n\n  return undefined;\n} // variable used to generate id\n\nlet idCounter = 42;\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\n\nexport function uniqueId(prefix) {\n  const id = ++idCounter;\n  return prefix ? String(prefix) + id : id;\n}\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\n\nexport function resetIdCounter() {\n  idCounter = 42;\n}\nexport function internalField(name) {\n  return isInternalField(name) ? name : \"__\".concat(name);\n}\nexport function isInternalField(name) {\n  return name.indexOf('__') === 0;\n}\n/**\n * Normalize angle to be within [0,360).\n */\n\nexport function normalizeAngle(angle) {\n  return (angle % 360 + 360) % 360;\n}","map":null,"metadata":{},"sourceType":"module"}